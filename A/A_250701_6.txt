1. 쉐이딩 모델이란?
->
쉐이딩 모델은 3D 오브젝트의 표면이 빛과 상호작용하여 어떻게 보이는지를 수학적으로 모델링하는 방법을 의미합니다. 오브젝트의 색상, 반사, 그림자 등을 계산하여 현실감 있게 표현하는 방식을 말합니다.


2. 퐁 쉐이더란?
->
퐁 쉐이더는 1970년대에 개발된 초기 쉐이딩 모델 중 하나입니다. 오브젝트의 표면을 앰비언트(주변광), 디퓨즈(확산광), 스페큘러(반사광) 세가지 요소로 나누어 빛과의 상호작용을 계산합니다.

앰비언트: 오브젝트가 모든 방향에서 받는 균일한 주변광을 표현합니다.
디퓨즈: 광원의 방향과 표면 법선 벡터의 각도에 따라 빛이 확산되는 정도를 표현합니다.
스페큘러: 광원의 반사 방향과 카메라의 시선 방향이 일치할 때 나타나는 반짝이는 하이라이트를 표현합니다.

퐁 쉐이더는 계산 비용이 저렴하여 예전에는 널리 사용되었지만 현실적인 재질 표현에는 한계가 있습니다. UE에서는 주로 PBR 쉐이더를 사용하며 퐁 쉐이더는 레거시 시스템이나 특정 비현실적인 효과를 위해 제한적으로 사용될 수 있습니다.


3. PBR 쉐이더란?
->
PBR 쉐이더는 물리적으로 정확한 방식으로 빛과 재질의 상호작용을 시뮬레이션하는 쉐이딩 모델입니다. 실제 세계의 물리 법칙을 따르므로 광원의 종류나 환경에 상관없이 일관되고 사실적인 결과를 얻을 수 있습니다. PBR은 다음과 같은 핵심 개념을 기반으로 합니다.

에너지 보존: 빛 에너지가 생성되거나 소멸되지 않고 보존된다는 원칙을 따릅니다.
프레넬 효과: 빛이 표면에 입사하는 각도에 따라 반사되는 정도가 달라지는 현상을 반영합니다.
마이크로 서페이스: 표면이 미시적으로 얼마나 거친지에 따라 빛의 반사 분포가 달라지는 것을 고려합니다.

UE는 기본적으로 PBR 쉐이더를 사용하며 이는 개발자가 재질 파라미터(BaseColor, Metallic, Specular, Roughness 등)를 조절하여 현실적인 오브젝트를 쉽게 만들 수 있도록 지원합니다.


4. 렌더링 파이프라인이란?
->
렌더링 파이프라인은 3D 데이터를 2D 이미지로 변환하여 화면에 표시하기까지의 일련의 과정을 의미합니다. 이 과정은 여러 단계로 구성되며 각 단계마다 특정 작업을 수행합니다. 일반적인 렌더링 파이프라인은 다음과 같은 단계를 포함합니다.

애플리케이션 단계: CPU에서 모델링, 애니메이션, 물리 시뮬레이션, 컬링 등 전반적인 게임 로직과 렌더링에 필요한 데이터를 준비합니다.
지오메트리 단계: 정점 데이터(위치, 법선, UV 등)를 처리하고 월드 좌표계에서 화면 좌표계로 변환하며 클리핑 및 투영을 수행합니다.
래스터화 단계: 3D 기하학 데이터를 픽셀 단위로 변환하여 화면에 표시될 수 있도록 합니다. 이 과정에서 픽셀별 깊이(Z-Buffer) 및 텍스처 좌표가 계산됩니다.
픽셀 쉐이딩 단계: 각 픽셀에 대한 색상을 계산합니다. 재질, 광원, 그림자 등의 정보를 바탕으로 최종 픽셀 색상을 결정합니다.
출력 병합 단계: 최종 픽셀 색상을 프레임 버퍼에 기록하며 깊이 테스트, 스텐실 테스트, 블렌딩 등의 작업을 수행하여 화면에 최종 이미지를 완성합니다.

[ +@ ]
핵심(기본)은 무엇일까?: IA - VS - RS - PS - OM
전체 과정은?: IA → VS → (CHS → HS → TS → DS) → (GS → SO) → RS → PS → OM (+ CS)
(CHS → HS → TS → DS): 테셀레이션, 인스턴싱 관련, 정점을 3개 넘겨서 쉐이더 영역에서 많은 도형을 그릴때 사용하는 기술, CHS, HS, DS는 쉐이딩 모델로 커스텀 가능, TS는 테셀레이션이므로 불가, 3D 표현에서 성능 or 품질 개량목적으로 사용, 적은 버텍스로 쉐이더 영역에서 쪼개서 사용, LOD 사용
CHS: 엣지와 제어점의 갯수
HS: CHS의 정보를 가지고 와서 제어점(무게중심)의 위치 -> HS 호출할때 CHS도 같이 묶여서 호출해서 계산
TS: CHS, HS의 정보를 가지고 몇개를 자를지 정함 -> 건들 수 없는 시스템 영역
DS: 어떻게 자르고 싶은지 정함
(GS → SO): 순서상 표기이고 따로따로 써도 무방, DX10에서 추가되었고 GS는 TS로 대체 가능, SO는 CS가 추가되었기 때문에 두 쉐이더는 거의 쓰이지 않는다고 봐도 무방하다. 기본 렌더링 파이프라인 구조 외에 추가적인 것을 쓰는 이유는 품질 및 성능의 개량이라고 정의해도 될듯 실제로 그런 이유의 쓰임으로 보임.

테셀레이션은 꼭 3D에서만 쓰이는 것은 아니고 2D에서도 사용할 수 있음, 비가 1만개 내리는걸 구현할 때 비의 텍스처를 표기할 정점 4x10000개를 보내는 대신 10000개만 보내고 TS에서 4개로 늘려서 처리하면 CPU에서 4만개 -> 1만개만 보내면 되니까 성능 개선 가능, 코어수가 많고 병렬처리가 핵심인 GPU를 좀 더 잘 활용할 수 있는 방법이기도 하고 빌보드 오브젝트 구현에도 유리하다.


5. 포워드 렌더링이란?
->
포워드 렌더링은 렌더링 파이프라인에서 오브젝트를 그릴 때 각 오브젝트에 영향을 미치는 모든 광원을 즉시 계산하여 최종 색상을 결정하는 방식입니다.

장점.
직관적이고 구현이 간단합니다.
투명 오브젝트 처리가 용이합니다. 광원 정보를 이미 가지고 있으므로 투명도 계산이 쉽습니다.
안티앨리어싱 처리가 비교적 쉽습니다.

단점.
광원 수가 많아질수록 성능이 저하될 수 있습니다. 각 오브젝트-광원 쌍마다 계산이 반복되기 때문입니다. N개의 오브젝트와 M개의 광원이 있을 때 O(N*M)의 복잡도를 가질 수 있습니다.
많은 광원이 겹치는 복잡한 장면에서는 오버드로우가 발생할 가능성이 높습니다. 여러 오브젝트가 한 픽셀을 여러번 그리는 현상입니다.


6. 디퍼드 렌더링이란?
->
디퍼드 렌더링은 렌더링 파이프라인을 크게 두 단계로 나누어 광원 계산 비용을 최적화하는 방식입니다.

패스.
G-Buffer 생성 단계 (Geometry Pass): 모든 오브젝트의 지오메트리 정보를 먼저 렌더링하여 G-Buffer라는 여러개의 텍스처에 저장합니다. G-Buffer에는 각 픽셀의 월드 공간 위치, 법선, 알베도, 러프니스, 메탈릭 등 재질 정보가 담깁니다. 이 단계에서는 광원 계산은 이루어지지 않습니다.
광원 계산 단계 (Lighting Pass): G-Buffer에 저장된 정보를 바탕으로 모든 광원의 영향을 한번에 계산하여 최종 픽셀 색상을 결정합니다. 이 단계는 화면 공간에서 이루어지며 광원 정보만을 사용하여 각 픽셀의 최종 색상을 결정합니다.

장점.
광원 수가 많아질 수록 성능 효율이 매우 좋습니다. 광원 계산이 픽셀 단위로 한번만 이루어지므로 광원 수에 비례하여 성능 저하가 크지 않습니다.
수많은 동적 광원을 처리하는데 매우 효과적입니다.

단점.
투명 오브젝트 처리가 복잡합니다. G-Buffer에는 불투명한 오브젝트의 정보만 저장되므로 투명 오브젝트는 별도의 포워드 패스로 처리해야 합니다.
G-Buffer가 많은 메모리를 차지합니다. 여러개의 텍스처를 사용해야 하기 때문입니다.
MSAA 적용이 어렵습니다. (TAA같은 후처리 안티앨리어싱으로 보완 가능)