언리얼 엔진 가비지 컬렉션의 기본 원리: 언리얼 엔진의 가비지 컬렉션 시스템은 어떤 방식으로 UObject 기반 메모리를 관리하며, 참조(Reference) 추적을 통해 더 이상 사용되지 않는 객체를 어떻게 식별하고 해제하는지 설명하시오.
->
참조 추적(Reference Tracing): GC의 핵심은 루트에서 도달이 가능한지 판단하는 것입니다.
루트(Root): UE는 항상 메모리에 상주하며 GC의 시작점이 되는 객체 집합을 가집니다. 여기에는 UGameInstance, UWorld, UClass의 CDO, UObject에 의해 등록된 정적 변수, 게임 스택에 있는 UObject 포인터 등이 포함됩니다.
도달 가능성 탐색: GC는 루트에서부터 모든 UObject 참조를 따라가면서 참조 그래프를 탐색합니다. 이 탐색 과정에서 발견되는 모든 UObject는 도달 가능한 객체로 표시됩니다.

사용되지 않는 객체 식별 및 해제.
GC 사이클이 시작되면 UE는 메모리에 있는 모든 UObject에 대한 정보를 수집합니다.
마킹(Marking): GC는 루트 세트에서 시작하여 루트에서 직간접적으로 참조되는 모든 UObject를 사용중(In-Use) 또는 도달가능(Reachable)으로 표시(Mark)합니다. 이는 포인터 체인을 따라가면서 재귀적으로 이루어집니다.
스위핑(Sweeping): 마킹 단계가 완료되면 GC는 메모리 전체를 순회하면서 표시되지 않은(Unmarked) UObject들을 더이상 사용되지 않는(Unreachable) 객체로 식별합니다.
정리(Collectiong): 식별된 도달 불가능한 객체들의 메모리를 해제하고 이들을 가리키던 포인터들을 정리합니다. 이 과정에서 BeginDestroy(), MarkPendingKill(), ConditionalBeginDestroy()와 같은 UObject 생명 주기 함수들이 적절히 호출됩니다.


UPROPERTY() 매크로의 역할: UObject를 상속받은 클래스에서 다른 UObject 포인터를 멤버 변수로 가질 때 UPROPERTY() 매크로를 사용하는 주된 이유는 무엇이며, 이 매크로가 가비지 컬렉터가 해당 참조를 인식하고 객체의 생명 주기를 올바르게 관리하는 데 어떻게 기여하는지 설명하시오.
->
UObject를 상속받은 클래스에서 다른 UObject 포인터를 멤버 변수로 가질 때 UPROPERTY() 매크로를 사용하는 주된 이유는 가비지 컬렉터가 해당 참조를 인식하고 객체의 생명 주기를 올바르게 관리하도록 하기 위함입니다.

주된 이유.
C++의 일반적인 포인터는 GC가 참조를 추적하는데 필요한 메타데이터를 가지고 있지 않습니다. GC는 단순히 메모리 주소만 보고는 해당 주소에 UObject가 있는지 그리고 그것이 다른 UObject를 참조하는지 알 수 없습니다.
UPROPERTY() 매크로는 언리얼 엔진의 리플렉션 시스템의 일부입니다. 이 매크로를 변수에 붙이면 컴파일 시 해당 변수에 대한 메타데이터가 생성됩니다.

GC 기여.
참조 인식: UPROPERTY() 매크로 덕분에 GC는 특정 클래스의 멤버 변수 중 어떤 것이 UObject 포인터이며 따라서 GC 탐색의 대상이 되어야 하는지 정확히 알 수 있습니다. GC가 참조 그래프를 탐색할 때 UPROPERTY가 붙은 UObject* 변수를 따라가 다음 UObject를 마킹합니다.
강한 참조 생성(Strong Reference): UPROPERTY()로 선언된 UObject* 포인터는 해당 UObject에 대한 강한 참조로 간주됩니다. 이 포인터가 살아있는 한 가리키는 UObject는 GC에 의해 해제되지 않습니다. 이는 해당 객체의 생명 주기를 효과적으로 연장시켜줍니다.
데이터 무결성 유지: 만약 UPROPERTY()를 사용하지 않고 UObject*를 선언하면 GC는 해당 포인터가 가리키는 UObject를 인식하지 못하여 다른 곳에서 참조가 없다고 판단하면 해당 UObject를 메모리에서 해제해버릴 수 있습니다. 이 경우 UPROPERTY()가 없는 포인터는 이미 해제된 메모리를 가리키는 댕글링 포인터가 되어 프로그램 크래시의 원인이 됩니다. UPROPERTY()는 이러한 문제를 방지하여 데이터의 무결성을 보장합니다.


TWeakObjectPtr의 활용: TWeakObjectPtr는 무엇이며, UObject에 대한 강한 참조(Strong Reference)를 생성하지 않으면서도 객체를 안전하게 참조해야 할 때(예: 순환 참조 방지, 객체 소멸 여부 확인) 어떻게 사용되는지 설명하시오. TWeakObjectPtr가 GC에 미치는 영향은 무엇인가요?
->
TWeakObjectPtr는 UObject에 대한 약한 참조(Weak Reference)를 나타내는 스마트 포인터입니다. 이는 UObject의 생명 주기를 관리하거나 GC에 영향을 미치지 않으면서 안전하게 객체를 참조해야 할 때 사용됩니다.

용도.
TWeakObjectPtr는 UObject를 가리키지만 해당 UObject의 참조 카운트를 증가시키지 않습니다.
따라서 TWeakObjectPtr만이 UObject를 참조하고 있을 경우 해당 UObject는 GC에 의해 언제든지 해제될 수 있습니다.

순환 참조(Circular Reference) 방지.
두 UObject(A, B)가 서로를 강한 참조(UPOPERTY() UObject*)로 가지고 있을 경우 둘 다 영원히 GC되지 않는 메모리 누수가 발생할 수 있습니다.
이런 경우 한쪽(A)을 UPROPERTY()로 강한 참조를 유지하고 다른 한쪽(B)에서 TWeakObjectPtr<A>로 약한 참조로 변경하여 순환 참조를 끊습니다. B가 A를 참조하더라도 A의 참조 카운트는 증가하지 않으므로 A가 더 이상 다른 강한 참조가 없다면 GC에 의해 해제될 수 있습니다.

객체 소멸 여부 안전하게 확인.
TWeakObjectPtr는 가리키는 UObject가 GC에 의해 해제되면 자동으로 nullptr로 설정됩니다.
따라서 객체가 유효한지 안전하게 확인한 후 사용해야 합니다. IsValid() 메서드나 암시적 bool 변환을 통해 확인하고 Get() 메서드를 호출하여 UObject* 포인터를 얻습니다.

UI 위젯 등에서 데이터 참조.
UI 위젯이 특정 게임플레이 객체를 참조해야 할 때 강한 참조를 가지면 캐릭터가 사라져도 UI 위젯 때문에 메모리에서 해제되지 않는 문제가 생길 수 있습니다. 이럴 때 TWeakObjectPtr를 사용하여 캐릭터의 생명 주기에 영향을 주지 않으면서 안전하게 참조합니다.

TWeakObjectPtr가 GC에 미치는 영향.
TWeakObjectPtr는 GC의 참조 그래프 탐색 과정에서 해당 UObject에 대한 참조로 간주되지 않습니다. TWeakObjectPtr만이 UObject를 참조하고 있다면 GC는 그 UObject를 도달 불가능하다고 판단하고 해제할 수 있습니다.
TWeakObjectPtr는 GC가 실행될 때마다 자신이 가리키는 UObject가 유효한지 확인하고 만약 해당 UObject가 파괴되었다면 내부 포인터를 nullptr로 업데이트합니다.


가비지 컬렉션의 트리거 시점 및 최적화: 언리얼 엔진에서 가비지 컬렉션이 일반적으로 언제(예: 레벨 로드/언로드, 특정 메모리 임계값 초과) 트리거되는지 설명하시오. 또한, 가비지 컬렉션으로 인한 게임 스톨(Stall) 현상을 최소화하기 위한 개발자로서의 최적화 전략(예: CollectGarbage() 호출 제어, 참조 최소화)을 제시하시오.
->
주요 트리거 시점.
레벨 로드/언로드: 새로운 레벨이 로드되거나 기존 레벨이 언로드될 때 이전 레벨에 속했던 UObject들을 정리하기 위해 GC가 실행됩니다. 이는 가장 흔하고 중요한 GC 트리거 시점입니다.
메모리 임계값 초과: 엔진이 설정된 메모리 사용량 임계값(gc.MaxObjectsInCluster, gc.MaxBytesInCluster)을 초과했다고 판단할 때 GC가 자동으로 트리거될 수 있습니다. 이는 메모리 부족으로 인한 크래시를 방지하기 위함입니다.
수동 호출: 개발자가 코드에서 GEngine->ForceGarbageCollection(true) 또는 UWorld::ForceGarbageCollection()과 같이 명시적으로 GC를 호출할 수 있습니다. 이는 디버깅이나 특정 시점에 메모리를 강제로 정리해야 할 때 사용됩니다.
클라이언트 재시작: 멀티플레이어 게임에서 클라이언트가 다른 맵으로 이동하거나 서버에 다시 접속할 때 GC가 발생할 수 있습니다.

가비지 컬렉션으로 인한 게임 스톨 현상 최소화 전략.
GC는 모든 UObject를 탐색하고 정리하는 과정에서 메인 게임 스레드를 잠시 멈추게 할 수 있는데 이를 스톨 또는 프레임 드랍이라고 합니다. 이는 게임의 반응성에 큰 영향을 미치므로 최소화해야 합니다.

CollectGarbage() 호출 제어.
자주 호출하지 않기: GC는 비용이 많이 드는 작업이므로 매 프레임이나 너무 자주 호출하지 않도록 합니다.
로딩 스크린 중 호출: 레벨 로드/언로드 시점에 GC가 발생하는 것은 자연스러우며 이 때 로딩 스크린을 띄워 사용자에게 스톨을 숨길 수 있습니다.
메인 메뉴 진입 시: 게임 플레이 중이 아닐 때 강제로 GC를 실행하여 메모리를 정리할 수 있습니다.
유휴 시간: 게임 플레이 중 사용자의 입력이 없거나 캐릭터가 정지 상태일 때 GC를 트리거하는 것을 고려할 수 있습니다.
+@ 티커나 스레드워커에 할당해보기

참조 최소화.
불필요한 UObject 참조 피하기: 더 이상 필요 없는 UObject에 대한 UPROPERTY() 강한 참조를 즉시 nullptr로 만들거나 컬렉션에서 제거하여 GC가 해당 객체를 정리할 수 있도록 합니다.
TWeakObjectPtr 활용: 순환 참조가 예상되거나 객체의 생명 주기에 영향을 주지 않고 단순히 참조만 필요한 경우에는 TWeakObjectPtr를 사용합니다.

객체 재사용.
빈번하게 생성/파괴되는 UObject(투사체, 나이아가라액터, 데미지폰트위젯액터 등)의 경우 새로 생성하는 대신 미리 일정 개수를 만들어두고 필요할 때마다 재활용하는 객체 풀링 패턴을 사용합니다. 이는 GC 발생 빈도를 줄여줍니다.

클러스터링.
UE는 관련 있는 UObject들을 클러스터로 묶어 관리할 수 있습니다. 클러스터는 한번에 모두 로드되거나 모두 언로드되므로 GC가 더 효율적으로 작동하도록 돕습니다.

MarkPendingKill() 활용.
UObject를 즉시 파괴하는 대신 MarkPendingKill()을 호출하여 해당 객체를 다음 GC 사이클에 정리되 대기중(Pending Kill) 상태로 만듭니다. 이는 즉각적인 파괴로 인한 스톨을 방지하고 GC가 일괄적으로 처리하도록 합니다.

스트리밍 레벨:
대규모 오픈 월드 게임에서 모든 레벨을 한번에 로드하지 않고 플에이어의 위치에 따라 필요한 레벨 부분만 동적으로 로드/언로드하는 스트리밍 레벨 기법을 사용합니다. 이는 한번에 GC가 처리해야 할 UObject 수를 줄여 스톨을 완화합니다.


AddReferencedObjects() 함수와 GC: UObject가 아닌 일반 C++ 클래스(예: TSharedPtr로 관리되는 객체)가 UObject를 참조하는 경우, 가비지 컬렉터가 해당 UObject를 올바르게 추적하도록 하기 위해 AddReferencedObjects() 함수를 어떻게 활용할 수 있는지 설명하시오.
->
AddReferencedObjects() 함수는 UObject가 아닌 일반 C++ 클래스가 UObject를 참조하는 경우 가비지 컬렉터가 해당 UObject를 올바르게 추적하도록 하기 위해 활용됩니다.

문제점.
UPROPERTY() 매크로는 오직 UObject 파생 클래스의 멤버 변수에만 붙일 수 있습니다.
만약 UObject 파생 클래스가 아닌 일반 C++ 클래스가 UObject* 포인터를 가지고 있거나 UObject 파생 클래스 내부에 std::vector<UObject*>와 같은 일반 C++ 컨테이너에 UObject* 포인터를 저장하면 GC는 해당 참조를 자동으로 인식하지 못합니다.
이 경우 GC는 해당 UObject를 도달 불가능하다고 판단하여 메모리에서 해제할 수 있고 이는 댕글링 포인터 문제를 야기합니다.

AddReferencedObjects() 활용.
UObject를 상속받는 클래스에서 AddReferencedObjects() 가상 함수를 오버라이드합니다.
이 함수는 GC가 참조 그래프를 탐색할 때 호출됩니다. 개발자는 이 함수 내에서 GC가 자동으로 탐색할 수 없는 UObject* 포인터들을 FReferenceCollector에 명시적으로 추가하여 GC가 해당 UObject들을 마킹하도록 지시해야 합니다.

커스텀 C++ 컨테이너: 직접 만든 TArray와 유사한 C++ 템플릿 클래스 안에 UObject를 저장할 때 사용
비 UObject 클래스 내의 UObject 참조: FRunnable 파생 클래스나 다른 일반 C++ 매니저 클래스가 UObject를 가지고 있고 이 일반 C++ 클래스가 어떤 UObject의 멤버 변수로 포함되어 있을 때(FRunnable 자체는 GC 대상이 아니므로 개발자가 직접 관리 필요)
델리게이트를 통해 참조되는 UObject: 델리게이트에 바인딩된 UObject 함수 포인터가 GC에 의해 해제되는 것을 방지하고자 할 때(이 경우는 보통 UPROPERTY나 TWeakObjectPtr로 해결 가능)

주의점.
AddReferencedObjects()를 오버라이드할 때는 항상 기본 클래스의 AddReferencedObjects()를 호출해야 GC가 상위 클래스의 참조도 올바르게 추적할 수 있음
대부분의 문제는 UPROPERTY와 TWeakObjectPtr로 해결하는 것을 권장