GAS의 핵심 구성 요소: 언리얼 엔진의 Gameplay Ability System (GAS)을 구성하는 네 가지 핵심 요소(UAbilitySystemComponent, UGameplayAbility, UGameplayEffect, UAttributeSet)는 무엇이며, 각각의 주요 역할과 이들이 어떻게 상호작용하여 캐릭터의 능력과 상태를 관리하는지 설명하시오.
->
UAbilitySystemComponent(ASC)는 GAS의 중앙 허브입니다. 모든 GAS 관련 상호작용(어빌리티 활성화, 이펙트 적용, 스텟 관리 등)을 처리하는 액터 컴포넌트입니다. UAbilitySystemComponent는 해당 캐릭터의 모든 UGameplayAbility 인스턴스를 소유하고 관리하며 UGameplayEffect의 적용 대상이 되고 UAttributeSet을 소유합니다. 어빌리티 요청(Activate), 이펙트 적용(Apply), 스탯 관리(Attribute), 태그 소유(GameplayTag)의 상호작용을 제공합니다.
UGameplayAbility는 하나의 특정 능력, 스킬, 행동의 로직을 캡슐화합니다. 무엇을 할 것인가를 정의합니다. UAbilitySystemComponent에 의해 소유되며 UGameplayEffect를 적용하거나 UAttributeSet의 스탯을 변경하는 등의 실제 게임플레이 로직을 실행합니다. 비용, 쿨다운, 태그 조건 등을 검사하여 활성화 여부를 결정합니다.
UGameplayEffect는 영구적이거나 일시적인 효과를 정의합니다. 이는 무엇이 변할 것인가를 정의하며 주로 스탯 변경(Attribute Modifier), 태그 부여/제거, 버프/디버프 적용, 주기적인 효과 등에 사용됩니다. UGameplayAbility에 의해 생성되어 UAbilitySystemComponent에 적용됩니다. 적용된 UGameplayEffect는 해당 UAbilitySystemComponent의 UAttributeSet에 영향을 미치고 태그를 부여하거나 제거할 수 있습니다.
UAttributeSet은 캐릭터의 모든 스탯을 정의하고 저장하는 컨테이너입니다. 대상이 누구인가를 정의합니다. UAbilitySystemComponent에 의해 소유되며 UGameplayEffect가 이 UAttributeSet에 정의된 스탯에 접근하여 값을 변경합니다. 스탯 변경 시 콜백을 발생시켜 UI 업데이트 등 추가 로직을 트리거할 수 있습니다.

UGameplayAbility의 활성화 및 수명 주기: UGameplayAbility가 어떻게 활성화(Activate)되고, 활성화 이후 취소(Cancel) 또는 종료(End)될 때까지 그 수명 주기(Lifecycle) 동안 어떤 주요 단계(예: 비용/쿨다운 검사, 로직 실행, 태그 부여/제거)를 거치는지 설명하시오.
->
UGameplayAbility는 특정 조건을 만족할 때 UAbilitySystemComponent에 의해 활성화되고 정의된 수명 주기를 거쳐 종료됩니다.
어빌리티가 활성화되기 전에 먼저 정의된 마나, 스태미나 등의 비용을 지불할 수 있는지 그리고 쿨다운이 끝났는지 검사합니다. 어빌리티에 정의된 ActivationRequiredTags, ActivationBlockedTags 등의 태그 조건이 충족되는지 검사합니다. 모든 조건이 충족되면 UAbilitySystemComponent는 서버에게 어빌리티 활성화를 요청하고 서버는 이를 최종적으로 승인합니다. 서버의 승인을 받으면 어빌리티의 ActivateAbility() 함수가 호출됩니다. 이것이 어빌리티 로직의 시작점입니다.
ActivateAbility()에서는 어빌리티 비용과 쿨다운을 실제로 적용합니다. (ApplyAbilityCost(), ApplyAbilityCooldown()) 어빌리티가 활성화되는 동안 캐릭터에게 특정 태그를 부여하여 다른 어빌리티의 활성화를 막거나 특정 상태임을 나타냅니다. 실제 어빌리티 로직을 실행합니다. AbilityTask를 사용하여 비동기적인 시퀀스를 관리할 수 있습니다.
CancelAbility()에서는 플레이어 입력, 특정 이벤트, 또는 다른 어빌리티에 의해 어빌리티가 중간에 강제로 취소될 때 호출됩니다. K2_OnAbilityCancelled() 또는 OnAbilityCancelled()가 호출되어 취소 시 정리가 필요한 로직을 수행합니다.
EndAbility()에서는 어빌리티 로직이 완료되거나 취소되거나 실패했을 때 호출됩니다. 어빌리티가 부여했던 임시 태그를 제거하고 AbilityTask를 정리하며 최종적인 상태 변경을 수행합니다. 이것이 어빌리티 로직의 종착점입니다. EndAbility()와 같이 호출되어 취소되었는지 여부 등 종료 원인에 대한 정보를 전달받을 수 있습니다.

UGameplayEffect의 역할과 적용 방식: UGameplayEffect는 무엇이며, 스탯 변경(Modifier), 태그 부여/제거, 버프/디버프 등 게임플레이 효과를 정의하고 UAbilitySystemComponent에 어떻게 적용되는지 설명하시오. Duration, Period, Stack과 같은 개념도 함께 설명하시오.
->
UGameplayEffect는 게임플레이 효과를 정의하고 UAbilitySystemComponent에 적용하는 핵심 요소입니다.
Modifier 배열을 통해 특정 UAttributeSet의 Attribute 값을 어떻게 변경할지 정의합니다. GrantedTags를 통해 이 이펙트가 활성화되는 동안 대상에게 특정 GameplayTag를 부여하고 AssetTags를 통해 이펙트 자체를 식별하는 태그를 가집니다. OngoingTagRequirements를 통해 이펙트가 유지되기 위한 태그 조건을 설정할 수 있습니다. UGameplayEffect의 가장 흔한 사용 사례로 캐릭터에게 긍정적 또는 부정적 효과를 부여합니다.
UAbilitySystemComponent의 APplyGameplayEffectSpecToSelf() 또는 ApplyGameplayEffectSpecToTarget() 함수를 통해 FGameplayEffectSpec(적용될 이펙트의 구체적인 인스턴스)을 대상 ASC에 적용합니다. 이펙트는 ActiveGameplayEffects라는 ASC 내부 목록에 추가되어 관리됩니다.
Duration은 즉시 적용되는 Instant, 특정 시간동안 적용되는 Duration, 제거시까지 적용되는 Infinite를 선택할 수 있습니다.
Period는 Duration 타입 이펙트 중 주기적으로 효과를 적용할 때 사용됩니다. (1초마다 10 체력 회복 등)
Stack은 동일한 UGameplayEffect가 여러번 적용될 때 이를 어떻게 처리할지 정의합니다. No Stacking(중첩 불가), Aggregate by Stack(중첩 허용), Refresh Duration(중첩 불가, 지속시간만 갱신) 중 Stacking Type을 선택할 수 있습니다. Stack Limit를 설정해 스택이 쌓일 수 있는 최대 횟수를 정의합니다.

UAttributeSet과 Attribute: UAttributeSet은 무엇이며, 캐릭터의 체력, 마나, 공격력 등 게임플레이 속성(Attribute)을 어떻게 정의하고 관리하는지 설명하시오. Attribute의 기본 값, 베이스 값, 최종 값의 개념과 Attribute가 변경될 때 발생하는 콜백(OnAttributeChanged)에 대해 설명하시오.
->
UAttributeSet은 UAbilitySystemComponent가 소유하는 캐릭터의 모든 게임플레이 속성들을 정의하고 저장하는 UObject 클래스입니다. 이는 캐릭터의 스탯 데이터를 중앙 집중식으로 관리하는 역할을 합니다. UAttributeSet 내부에서 FGameplayAttribute 타입으로 스탯들을 UPROPERTY로 선언합니다.
Base Value는 UAttributeSet 인스턴스가 생성될 때 또는 캐릭터가 레벨업/능력치 초기화될 때 설정되는 변동되지 않는 기준 값입니다.
Pre-Additive/Multiplicative Value는 UGameplayEffect의 Additive 및 Multiplicative 변경이 적용되기 전의 값입니다. 기본 값에 영구적인 스탯 보너스 등이 적용된 중간 단계 값으로 볼 수 있습니다.
Final Value는 UGameplayEffect의 Additive, Multiplicative 변경이 최종적으로 적용된 현재 Attribute의 실제 사용 값입니다.
UGameplayEffect가 Attribute를 변경할 때 GAS는 이 BaseValue에 Additive 모디파이어를 더하고 Multiplicative 모디파이어를 곱한 후 최종적으로 Clamping을 적용하여 FinalValue를 계산합니다.
Attribute의 값이 변경될 때마다 UAbilitySystemComponent는 FOnGameplayAttributeValueChange 델리게이트를 브로드캐스트합니다. 이 델리게이트는 UAttributeSet의 각 Attribute에 대해 별도로 접근자를 통해 얻을 수 있습니다.

Gameplay Tag의 활용: GAS에서 Gameplay Tag는 무엇이며, 어빌리티 활성화 조건, 게임플레이 효과 적용 조건, 캐릭터 상태 표현(예: 기절, 이동 불가), Input 처리 등에 어떻게 광범위하게 활용될 수 있는지 구체적인 예시와 함께 설명하시오.
->
Gameplay Tag는 UE에서 계층적이고 확장 가능한 문자열 태그 시스템입니다. GAS에서 Gameplay Tag는 다양한 게임플레이 로직에서 조건, 상태, 분류 등을 표현하는데 광범위하게 사용됩니다.
Ability.Weapon.Sword, Ability.Weapon.Axe와 같이 .으로 구분된 계층 구조를 가집니다. Ability.Weapon 태그를 검사하면 Ability.Weapon.Sword, Ability.Weapon.Axe 모두 포함됩니다.
DefaultGameplayTags.ini 파일이나 데이터 테이블을 통해 정의되므로 코드 수정 없이 새로운 태그를 추가하거나 변경할 수 있습니다. 해싱 기반으로 구현되어 런타임에 매우 빠르게 태그를 검색하고 비교할 수 있습니다.
Gameplay Tag는 어빌리티 활성화 조건, 게임플레이 효과 적용 조건, 캐릭터 상태 표현, Input 처리, 피격 판정 및 데미지 타입 등에 사용됩니다.

GameplayEffectExecutionCalculation의 필요성: GameplayEffectExecutionCalculation (또는 UGameplayEffectCustomApplicationRequirement)은 무엇이며, 복잡한 계산식(예: 방어력에 따른 최종 피해량 계산, 스킬 레벨에 따른 효과 강도)을 통해 GameplayEffect의 최종 효과를 결정하고 적용하는 데 어떻게 사용되는지 설명하시오.
->
GameplayEffectExecutionCalculation은 UGameplayEffect의 최종 효과, 특히 Attribute 변경량을 결정하는 복잡한 계산 로직을 정의하는데 사용되는 클래스입니다. UGameplayEffect의 기본 Modifier는 단순히 Additive, Multiplicative, Override와 같은 단순한 연산을 제공합니다. 하지만 게임에서는 다양한 변수를 고려한 복잡한 수식을 통해 최종 효과가 결정되는 경우가 많습니다. 이러한 복잡한 계산을 UGameplayEffect 자체에 직접 구현하기는 어렵습니다. GameplayEffectExecutionCalculation은 이러한 복잡한 계산 로직을 UGameplayEffect로부터 분리하여 캡슐화하고 재사용할 수 있게 합니다.
UGameplayEffectExecutionCalculation을 상속받는 C++ 클래스를 생성하고 Execute_Implementation() 함수를 오버라이드하여 실제 계산 로직을 구현합니다. 함수 내에서 공격자(Source)와 대상(Target)의 UAbilitySystemComponent 및 UAttributeSet에 접근하여 필요한 Attribute 값을 가져오고 미리 정의된 복잡한 수식에 따라 최종 Attribute 변경량을 계산합니다. 계상된 값을 OutExecutionOutput에 추가하여 UGameplayEffect가 최종적으로 적용할 Attribute 변경량을 설정합니다. UGameplayEffect의 Executions 배열에 이 UGameplayEffectExecutionCalculation 클래스를 지정하면 해당 UGameplayEffect가 적용될 때마다 이 계산 로직이 실행됩니다.
UGameplayEffect의 핵심 기능과 실제 계산 로직을 명확하게 분리하여 코드의 유지보수성과 재사용성을 높입니다.

네트워크 예측(Prediction)의 중요성: GAS에서 클라이언트 측 네트워크 예측(Client-Side Prediction)이 왜 중요한지 설명하고, 어빌리티 활성화, Gameplay Effect 적용 등에서 예측이 어떻게 작동하여 네트워크 지연(Latency)을 숨기고 반응성을 높이는지 설명하시오. 예측 실패 시 어떻게 롤백(Rollback)되고 재보정(Correction)되는지도 간략히 설명하시오.
->
GAS에서 클라이언트 측 네트워크 예측은 네트워크 지연을 숨기고 게임의 반응성을 높이는 데 매우 중요합니다. 특히 플레이어의 입력에 즉각적으로 반응해야 하는 어빌리티 활성화나 이펙트 적용에 필수적입니다. 플레이어가 공격 버튼을 눌렀을 때 그 입력이 서버로 전송되고 서버가 처리한 뒤 다시 클라이언트로 결과를 보내는 데는 필연적으로 네트워크 지연이 발생합니다. 이 지연 시간만큼 플레이어는 자신이 입력한 행동의 결과를 늦게 보게 되어 지연을 체감할 수 있습니다. 네트워크 예측은 이러한 지연을 숨겨 플레이어가 입력하는 순간 즉시 행동 결과가 나타나는 것처럼 보이게 합니다.
플레이어가 어빌리티를 사용하면 클라이언트는 즉시 해당 어빌리티를 예측적으로 활성화합니다. 클라이언트는 서버의 승인을 기다리지 않고 미리 정의된 어빌리티 로직을 실행합니다. 이 때 UGameplayAbility와 UGameplayEffect는 예측적인 상태로 적용됩니다. 동시에 클라이언트는 서버에 해당 어빌리티 활성화 요청을 보냅니다. 서버는 클라이언트의 요청을 받으면 유효성 검사를 수행한 후 서버 측에서 권한적으로 어빌리티 로직을 실행합니다. 이 때 실제 비용과 쿨다운이 적용되고 모든 클라이언트로 복제될 최종 상태가 결정됩니다. 서버가 최종 상태를 클라이언트에 복제하면 클라이언트는 자신이 예측했던 상태와 서버가 보내준 실제 상태를 비교합니다.
클라이언트가 예측했던 결과와 서버의 최종 결과가 다를 경우 예측 실패가 발생합니다. 클라이언트는 예측 실패를 감지하면 예측적으로 적용했던 모든 변경 사항을 롤백합니다. 그 후 서버가 복제해준 실제 상태로 자신의 상태를 재보정합니다. 이 과정은 매우 빠르게 이루어져 사용자에게는 순간적인 깜박임처럼 보일 수 있지만 대부분의 경우 지연으로 인한 렉보다 훨씬 나은 사용자 경험을 제공합니다.
네트워크 예측을 복잡하지만 멀티플레이어 게임에서 높은 반응성과 부드러운 사용자 경험을 제공하기 위한 필수적인 기술입니다.

어빌리티 비용(Cost) 및 쿨다운(Cooldown) 구현: UGameplayAbility에서 어빌리티 사용 비용(Cost)과 쿨다운(Cooldown)을 어떻게 정의하고 적용하는지 설명하시오. 특히 Cost는 UAttributeSet의 Attribute와, Cooldown은 Gameplay Tag와 어떻게 연동되어 처리되는지 설명하시오.
->
UGameplayAbility에서 어빌티리 사용 비용과 쿨다운은 UGameplayEffect를 활용하여 정의되고 적용됩니다.
GE_ManaCost_10, GE_StaminaCost_50 등 비용을 나타내는 UGameplayEffect 애셋을 생성합니다. 이펙트 내부의 Modifier에 UAttributeSet의 해당 Attribute (예: Mana, Stamina)를 -10 (Additive)과 같이 설정하여 소모량을 정의합니다. UGameplayAbility 클래스에서 CostGameplayEffectClass 변수에 이 비용 UGameplayEffect를 할당합니다. UGameplayAbility의 ActivateAbility() 내부에서 ApplyAbilityCost() 함수를 호출하여 이펙트를 UAbilitySystemComponent에 적용합니다. 이펙트가 적용되면 해당 Attribute의 값이 즉시 감소합니다. 어빌리티 활성화 전 CanActivateAbility()에서 CheckAbilityCost()를 호출하여 현재 Attribute 값이 비용 이상인지 확인합니다.
Cooldown.Skill.Fireball, Cooldown.Ability.Dash 등 각 어빌리티에 대한 고유한 쿨다운 Gameplay Tag를 정의합니다. GE_Cooldown_Fireball_5s, GE_Cooldown_Dash_3s 등 쿨다운을 나타내는 UGameplayEffect 애셋을 생성합니다. 이펙트의 Duration을 쿨다운 시간(예: 5초)으로 설정합니다. 이펙트의 GrantedTags에 해당 쿨다운 Gameplay Tag (예: Cooldown.Skill.Fireball)를 추가합니다. UGameplayAbility 클래스에서 CooldownGameplayEffectClass 변수에 이 쿨다운 UGameplayEffect를 할당합니다. UGameplayAbility의 ActivateAbility() 내부에서 ApplyAbilityCooldown() 함수를 호출하여 이펙트를 UAbilitySystemComponent에 적용합니다. 이펙트가 적용되는 동안 대상 ASC는 해당 쿨다운 태그를 가지게 됩니다. 어빌리티 활성화 전 CanActivateAbility()에서 CheckAbilityCooldown()을 호출합니다. 이 함수는 현재 ASC가 해당 쿨다운 태그를 가지고 있는지 검사합니다. 태그를 가지고 있다면 쿨다운 중이므로 어빌리티 활성화가 불가능합니다. 쿨다운 UGameplayEffect의 Duration이 끝나면 태그가 자동으로 제거되어 어빌리티를 다시 사용할 수 있게 됩니다.
비용은 UAttributeSet에 정의된 Attribute 값(예: Mana)을 직접 감소시키는 UGameplayEffect로 처리됩니다. 쿨다운은 특정 Gameplay Tag를 일정 시간 동안 대상 ASC에 부여하는 UGameplayEffect로 처리됩니다. 어빌리티는 활성화 조건에서 이 쿨다운 태그의 존재 여부를 검사하여 재사용 가능성을 판단합니다.

GAS 디버깅 및 분석 툴: 언리얼 엔진에서 GAS와 관련된 문제를 디버깅하고 분석하기 위해 어떤 툴(예: showdebug abilitysystem 콘솔 명령어, GameplayEffect 디버거, Unreal Insights의 GAS 트레이스)을 활용할 수 있는지 설명하시오.
->
showdebug abilitysystem은 게임 내에서 현재 활성화된 UAbilitySystemComponent의 실시간 상태를 화면에 오버레이로 표시해주는 강력한 디버깅 툴입니다. 활성화된 어빌리티, 적용된 이펙트, Attribute 값, Gameplay Tag, prediction Key 등을 확인할 수 있습니다.
UE 에디터 내에서 UGameplayEffect 에셋을 열고 디버그 모드로 전환하면 해당 이펙트가 적용될 때의 동작을 시각적으로 시뮬레이션해볼 수 있습니다. Modifier 적용, GrantedTags 부여, ExecutionCalculation 동작 등을 확인해볼 수 있습니다.
Unreal Insights에서는 Gameplay Ability System 관련 이벤트들을 시간 기반으로 기록하고 시각적으로 분석할 수 있는 GAS 트레이스 기능을 제공합니다. 어빌리티 활성화/종료 시점, 이펙트 적용/제거 시점, Attribute 변경 이벤트, 네트워크 예측 이벤트, 네트워크 복제 상세 등을 확인할 수 있습니다.

GAS 컴포넌트의 네트워크 복제 전략: UAbilitySystemComponent와 그 하위의 GameplayEffectContainer, ActiveGameplayEffect 등이 멀티플레이어 환경에서 어떻게 복제(Replication)되며, 서버 권한(Authority)을 가진 액터와 프록시(Proxy) 액터 간에 일관된 게임 상태를 유지하기 위한 GAS의 복제 전략에 대해 설명하시오.
->
UAbilitySystemComponent와 그 하위 요소들은 멀티플레이어 환경에서 서버 권한을 중심으로 일관된 게임 상태를 유지하기 위해 복제됩니다. 모든 GAS 관련 변경은 서버의 UAbilitySystemComponent에서 권한적으로 처리됩니다. 서버만이 게임의 최종 상태를 결정하고 변경할 권한을 가집니다. 클라이언트의 UAbilitySystemComponent는 서버의 ASC로부터 복제된 데이터를 받아 자신의 상태를 업데이트합니다. 클라이언트는 직접 상태를 변경할 권한이 없으며 오직 서버의 상태를 시뮬레이션하고 반영합니다.
주요 복제 요소는 UAbilitySystemComponent, ActiveGameplayEffects, UAttributeSet, GameplayTag, 네트워크 예측입니다. GAS는 서버 권한 모델을 기반으로 UAbilitySystemComponent와 그 하위 데이터들을 효율저긍로 복제함으로서 네트워크 지연 환경에서도 모든 플레이어에게 일관되고 반응성 높은 게임플레이 경험을 제공합니다.