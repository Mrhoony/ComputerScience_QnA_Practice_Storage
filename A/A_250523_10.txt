C++ 표준 라이브러리의 std::vector<bool>이 다른 std::vector 특수화와 다른 점은 무엇이며, 어떤 이유로 논란의 여지가 있는지 설명하시오.
->
std::vector<bool>은 std::vector의 유일한 부분 특수화입니다. bool 값을 1바이트가 아닌 1비트로 압축하여 저장합니다. 비트 필드처럼 동작하여 메모리 효율성을 극대화한 구현입니다.
요소의 실제 주소 대신 프록시 객체를 반환하고 비트 단위의 접근은 바이트/워드 단위보다 접근이 느릴 수 있습니다. auto를 사용한 for문에서 bool이 아닌 std::vector<bool>::reference로 변환됩니다. 표준 라이브러리의 예상 동작 방식에서 벗어나 다른 구현 방식을 제공하여 일관성을 해친다는 의견이 있습니다.

noexcept로 선언된 함수가 런타임에 예외를 던질 경우, C++ 런타임은 어떻게 동작하는지 설명하시오.
->
noexcept가 선언된 함수가 런타임에 실제로 예외를 던지게 되면 예외를 캐치하거나 스택을 풀지 않고 즉시 프로그램을 종료시킵니다. noexcept의 함수에서 예외 발생 시 std::unexpected가 아닌 std::terminate를 호출하여 std::abort에 의해 프로그램이 강제 종료됩니다.

C++에서 alignas와 alignof 키워드는 무엇이며, 메모리 정렬(Memory Alignment)이 필요한 주된 이유를 설명하시오.
->
alignas는 변수, 클래스, 구조체 등의 메모리 정렬 요구 사항을 명시적으로 지정하는데 사용됩니다.
alignas(32) int data[8];
alignof는 타입의 메모리 정렬 요구 사항을 쿼리하는데 사용됩니다.
std::cout << alignof(int) << std::endl;
메모리 정렬은 메모리 공간을 절약함과 동시에 CPU의 효율적인 데이터 접근, 멀티스레딩 환경에서의 데이터 일관성, 현대적인 CPU의 고급 명령어 활용에 필수적인 요소입니다.

C++11의 auto 키워드를 사용하여 변수를 선언할 때, 타입 추론(Type Deduction) 규칙(예: 레퍼런스, const 한정자)에 대해 간략히 설명하시오.
->
auto는 변수 선언 시 초기화 표현식을 통해 컴파일러가 변수의 타입을 자동으로 추론합니다. 주요 타입 추론 규칙은 템플릿 인자 추론과 유사합니다. 값에 의한 추론, 레퍼런스 추론, 포인터 추론에 의해 값을 전달받을 때 타입이 추론됩니다.

3D 그래픽스 렌더링 파이프라인에서 정점 쉐이더(Vertex Shader)와 프래그먼트/픽셀 쉐이더(Fragment/Pixel Shader)의 주요 역할과 각각 어떤 종류의 데이터를 처리하는지 설명하시오.
->
Vertex Shader는 3D 모델을 구성하는 각 정점의 위치를 3D 월드 공간에서 2D 스크린 공간으로 변환하는 역할을 합니다. 모델-뷰-투영 변환과 노말 변환, UV 좌표 전달, 오브젝트별 조명 데이터 준비 등의 작업을 진행합니다.
Pixel Shader는 래스터라이저에 의해 생성된 각 프래그먼트에 대해 픽셀의 최종 색상을 결정하는 역할을 합니다. 텍스처 샘플링, 조명 계산, 색상 혼합, 투명도 처리 등의 작업을 진행합니다.

게임 루프(Game Loop)를 구현할 때 고정 시간 스텝(Fixed Timestep)과 가변 시간 스텝(Variable Timestep)의 차이점을 설명하고, 각각 어떤 장단점을 가지는지 설명하시오.
->
가변 시간 스텝은 게임 루프가 한번 반복될 때마다 이전 프레임으로부터 경과한 실제 시간을 사용하여 게임 로직을 업데이트하는 방식입니다. 높은 프레임률을 활용하고 구현이 간단하며 모든 프레임을 렌더링하지만 물리 시뮬레이션 동기화 문제, 업데이트 불안정성, 치팅의 위험이 있습니다.
고정 시간 스텝은게임 루프가 매 프레임마다 항상 일정한 고정된 시간 간격으로 게임 로직을 업데이트하는 방식입니다. 결정적 물리 시뮬레이션이 진행되어 재현성과 동기화가 보장되며 업데이트가 안정적이고 치팅을 방지하나 구현이 복잡하고 티어링과 스터터링이 발생할 수 있어 이를 해결할 보간 기법이 필요합니다. 고정 시간에 의해 성능 제한이 걸리게 됩니다.
대부분의 게임에서는 물리 및 게임 로직 업데이트에는 고정 시간 스텝을 사용하고 렌더링에는 가변 시간 스텝을 사용하는 하이브리드 방식을 채택합니다.

3D 그래픽스에서 그림자 매핑(Shadow Mapping)의 기본적인 원리(깊이 맵 생성 및 비교)와 그림자 효과 구현에 어떤 이점이 있는지 설명하시오.
->
그림자 매핑은 3D 씬에서 그림자 효과를 구현하는 가장 널리 사용되는 기법 중 하나입니다. 광원의 시점에서 깊이 맵을 생성하여 그림자를 생성하며 어떤 종류의 오브젝트라도 그림자를 생성할 수 있고 성능이 효율적이며 구현이 용이하고 다양한 광원을 지원합니다.

언리얼 엔진 개발 과정에서 Hot Reload(핫 리로드) 또는 Live Coding(라이브 코딩)을 사용할 때 발생할 수 있는 일반적인 문제점(예: 예측 불가능한 버그, 컴파일 오류)과 이를 해결하기 위한 팁을 제시하시오.
->
개발자가 C++ 코드를 수정하고난 후 엔진을 재시작하지 않고도 변경 사항을 즉시 적용할 수 있게 해주는 기능입니다. 편리한 기능이지만 메모리에 로드된 코드의 교체라는 복잡한 작업을 수행하기 때문에 메모리 레이아웃 변경, 가상 테이블 불일치, 정적 변수와 싱글톤 문제 등 예측 불가능한 런타임 버그와 컴파일 오류 또는 실패가 발생하기도 합니다.
기능을 사용할 때는 standalone을 제외한 에디터의 다른 창들을 닫아둔 상태에서 사용하는 것이 안전하며 해당 기능으로 인해 발생한 문제들은 대게 엔진을 재시작하여 발생한 문제를 해결합니다.

언리얼 엔진에서 문자열을 다루는 FString, FName, FText 세 가지 클래스의 메모리 오버헤드 관점에서 각각의 특징과 성능상 고려할 점을 설명하시오.
->
FString은 가변 문자열로 힙에 할당되며 TArray<TCHAR>를 기반으로 구성됩니다. 가장 큰 메모리 오버헤드가 발생하며 문자열의 길이에 따라 힙 할당 오버헤드가 발생합니다. 내용이 자주 변경되거나 조작이 필요한 문자열에 적합합니다.
FName은 불변 문자열 ID로 문자열 테이블 기반으로 구성되어 빠른 비교가 가능합니다. 인스턴스마다 적은 오버헤드를 가지며 전역 문자열 테이블 오버헤드가 있습니다. 동일한 문자열이 자주 사용되고 빠른 비교가 필요한 고유 식별자에 적합합니다.
FText는 현지화 가능한 문자열로 불변 문자열이며 로케일 기반에 따라 적절하게 번역되어 적용됩니다. 잠재적으로 FString보다 더 큰 오버헤드를 발생할 수 있습니다. 프로그래밍 내부 로직에서 사용하는 문자열로는 적합하지 않고 주로 현지화가 필요한 문자열에 사용됩니다.

언리얼 엔진 애니메이션 시스템에서 애니메이션 몽타주(Animation Montage)와 애니메이션 스테이트 머신(Animation State Machine)의 주요 차이점과 각각의 적절한 사용 시점을 설명하시오.
->
애니메이션 스테이트 머신은 지속적이고 반복적인 동작 관리, 상태 기반 로직, 애니메이션 블루프린트 내 구현, 낮은 레벨 제어의 특징을 가집니다. 기본 이동 상태, 계속되는 동작, 복잡한 상호작용, 상태 간 블렌딩 시에 활용됩니다.
애니메이션 몽타주는 일회성/간헐적 동작 관리, 스택 기반 우선순위, 코드/블루프린트 호출, 섹션/노티파이 기능의 특징을 가집니다. 공격 및 스킬 동작, 피격/사망 애니메이션, 회피 및 구르기, 상호작용, 루트모션 애니메이션 등에 사용됩니다.
