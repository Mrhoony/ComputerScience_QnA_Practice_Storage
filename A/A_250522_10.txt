C++에서 volatile 키워드는 언제, 왜 사용하며, 최적화 방지 외에 멀티스레딩 환경에서 어떤 중요한 역할을 하는지 설명하시오.
->
volatile 키워드는 변수 앞에 붙여서 해당 변수가 컴파일러에 의해 예측할 수 없는 방식으로 변경될 수 있음을 알려주는 타입 한정자입니다.
인터럽트 서비스 루틴, 멀티스레딩 환경에서 다른 스레드에 의해 변경될 수 있는 변수에 사용됩니다. 이 키워드가 붙은 변수는 컴파일러가 해당 변수에 대한 읽기/쓰기 작업을 최적화하지 않도록 강제합니다. 캐시 메모리를 활용하지 않고 항상 메인 메모리에서 값을 읽고 쓰도록 보장합니다. 이러한 특징을 이용해 멀티스레딩 환경에서 항상 최신화된 값을 사용하도록 유도할 수 있으나 원자성을 보장하지 않으므로 여전히 레이스 컨디션이 발생할 수 있습니다.

클래스의 멤버 함수에 const를 붙이는 것(void MyFunc() const;)의 의미와 const 객체에 대한 const 멤버 함수의 호출 가능성 등 const 정확성(Const Correctness)에 대해 설명하시오.
->
멤버 함수에 const를 붙이는 것은 해당 함수가 객체를 읽기 전용으로만 접근하는 것을 보장하며 const 객체는 오직 const 멤버 함수만 호출할 수 있습니다. const 정확성을 지키는 것은 코드의 안전성, 가독성, 유지보수성, 유연성을 향상시키는 중요한 C++ 코딩 습관입니다.

C++17에 도입된 [[nodiscard]] 속성(attribute)은 무엇이며, 어떤 경우에 함수의 반환 값을 무시하는 것을 경고하는 데 사용되는지 설명하시오.
->
함수의 반환 값을 반드시 사용해야 함을 컴파일러에게 알려주는 속성입니다. 함수의 사용 계약을 명확히 하고 컴파일 시점에 잠재적인 논리적 오류를 감지하여 런타임 버그로 이어지는 것을 방지하는 도구입니다.

C++에서 가상 상속(Virtual Inheritance)은 무엇이며, 다중 상속 시 발생할 수 있는 "다이아몬드 문제(Diamond Problem)"를 어떻게 해결하는지 설명하시오.
->
C++에서 다중 상속 시 발생하는 특정 문제(다이아몬드 문제)를 해결하기 위해 도입된 상속 매커니즘입니다. 자손 클래스에서 부모 클래스를 상속받을 때 virtual 키워드를 사용합니다. 손자 클래스에서 두 자손 클래스를 상속 받을 때 부모 클래스의 인스턴스는 하나만 생성되어 공통된 단일 인스턴스를 가리키게 됩니다.

3D 그래픽스에서 투명한(Transparent) 오브젝트를 렌더링할 때 알파 블렌딩(Alpha Blending)과 함께 고려해야 할 주요 문제점(예: 렌더링 순서)과 해결책에 대해 설명하시오.
->
픽셀의 색상에 알파값을 곱하여 원본 색상과 배경 색상을 혼합하는 과정입니다. 투명한 오브젝트를 렌더링할 때 가장 큰 문제는 렌더링 순서 입니다. 반시드 불투명한 오브젝트가 모두 렌더링 된 후 카메라에서부터 먼 오브젝트부터 가까운 오브젝트 순서로 렌더링되어야 합니다. 깊이 사전 패스와 순서 독립적 투명도를 이용하여 투명도를 정확하게 처리할 수 있습니다.

네트워크 게임에서 클라이언트와 서버 간에 주기적으로 교환하는 "하트비트(Heartbeat)" 메시지의 목적과 역할에 대해 설명하시오.
->
머신과 머신 간에 주기적으로 교환되는 작은 크기의 데이터 패킷을 의미합니다. 연결 활성 상태를 확인하고 NAT 타임아웃을 방지하며 네트워크 지연과 지터를 측정하고 방화벽 비활성 시간 연장, 유휴 상태를 관리합니다.

게임 물리 엔진에서 충돌 감지(Collision Detection)를 크게 두 단계, 즉 넓은 범위(Broad Phase)와 좁은 범위(Narrow Phase)로 나누는 이유와 각각의 역할에 대해 설명하시오.
->
비효율적인 계산을 줄이고 성능을 최적화하기 위해 충돌 감지 과정을 2단계로 나눕니다.
브로드 페이즈는 매우 빠르고 대략적인 방법으로 잠재적인 충돌 쌍을 추려내고 내로우 페이즈는 브로드 페이즈에서 추려진 충돌 쌍에 대해서만 충돌 감지 계산을 수행합니다.

언리얼 엔진의 UMG(Unreal Motion Graphics)에서 위젯 포커스(Focus) 관리 메커니즘은 무엇이며, UI 탐색 및 상호작용에 어떤 영향을 미치는지 설명하시오.
->
키보드, 게임패드 또는 마우스와 같은 입력 장치로부터 이벤트를 받을 위젯을 결정하는 시스템입니다. 직관적인 키보드/게임패드 네비게이션, 명확한 사용자 입력 처리, 상태 피드백, 텍스트 입력 처리, 모달 UI 구현 등 사용자의 경험을 향상시키고 다양한 입력 장치에 대한 UI 접근성을 보장할 수 있습니다.

언리얼 엔진 애니메이션에서 루트 모션(Root Motion)은 무엇이며, 어떤 종류의 캐릭터 이동(예: 공격, 구르기)에 주로 사용되고 어떤 장점을 가지는지 설명하시오.
->
루트 모션은 캐릭터의 실제 이동이 애니메이션 자체에 의해 제어되는 방식을 의미합니다. 정확하고 부드러운 애니메이션-드리븐 이동이 필요한 경우에 주로 사용되며 공격, 구르기, 대시, 회피 등에 사용됩니다.
애니메이터에게 제어의 편의와 높은 시각적 품질 및 사실감을 제공합니다. 플레이어의 즉각적인 입력에 따라 자유롭게 움직이는 캐릭터보다는 정해진 움직임 패턴을 가진 캐릭터에 더 적합합니다.

언리얼 엔진에서 Custom Depth(커스텀 뎁스) 렌더링 기능은 무엇이며, 아웃라인 효과(Outline Effect)나 커스텀 포스트 프로세스 이펙트 구현에 어떻게 활용될 수 있는지 설명하시오.
->
커스텀 뎁스는 메인 씬 렌더링과는 별개로 또 다른 깊이 버퍼에 렌더링할 수 있도록 해주는 기능입니다. 이 기능을 사용하려면 오브젝트의 Render CustomDepth Pass 속성을 활성화해야 합니다.
커스텀 뎁스는 아웃라인 효과를 구현하는 가장 일반적이고 효율적인 방법 중 하나입니다. 커스텀 뎁스 버퍼에 아웃라인을 적용할 오브젝트들을 렌더링한 뒤 메인 씬을 렌더링하고 포스트 프로세스 머터리얼을 사용하여 아웃라인 효과를 적용합니다.
셀 쉐이딩, 투시 효과, 렌더링 하이라이트/선택 효과, 커스텀 블러/디스토션을 이용하여 특정 오브젝트 그룹에만 후처리 효과를 선택적으로 적용할 수 있어 유니크한 시각 효과를 만드는 데 필수적입니다.
