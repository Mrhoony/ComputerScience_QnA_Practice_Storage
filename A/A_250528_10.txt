C++의 std::vector에서 capacity()와 size()의 차이점을 설명하고, reserve() 함수가 메모리 관리 및 성능에 미치는 영향을 설명하시오.
->
capacity()는 std::vector가 재할당 없이 최대로 저장할 수 있는 원소의 개수이고 size()는 현재 저장된 실제 원소의 개수입니다.
reserve()는 capacity()를 최소 n으로 늘려 미리 메모리를 할당합니다. 이는 원소 추가시 잦은 재할당으로 인한 성능 저하를 방지하여 성능을 향상시킵니다. 특히 많은 원소를 추가할 예정일 때 유용합니다.

C++에서 클래스에 사용자 정의 new와 delete 연산자를 오버로드하는 경우가 언제이며, 어떤 목적(예: 커스텀 메모리 풀 사용)을 가지는지 설명하시오.
->
특정 클래스에 대해 메모리 할당/해제 방식을 커스터마이징할 때 오버로드합니다.
작은 객체가 빈번하게 생성/소멸될 때 운영체제의 기본 new/delete 호출 오버헤드를 줄이고 미리 할당된 메모리풀에서 효율적으로 메모리를 관리하여 성능을 최적화하거나 특정 데이터 정렬 요구사항을 만족시키거나 메모리 할당/해제 과정을 추적하고 디버깅하기 위해 사용됩니다.

std::shared_ptr<BaseClass> base_ptr = std::make_shared<DerivedClass>();와 같이 다형적(Polymorphic) 스마트 포인터를 사용하는 예시를 들고, 이 경우 소멸자 호출 메커니즘과 관련된 주의점을 설명하시오.
->
base_ptr은 DerivedClass 객체를 가리키지만 BaseClass 타입의 포인터로 관리됩니다. std::shared_ptr은 관리하는 객체의 실제 타입의 소멸자를 올바르게 호출합니다. 이는 std::shared_ptr이 내부적으로 타입 소거 기법을 사용하여 런타임에 올바른 소멸자를 찾기 때문입니다.
원시 포인터를 사용했다면 BaseClass의 소멸자가 가상함수가 아닐 경우에 DerivedClass의 소멸자가 호출되지 않는 미정의 동작 문제가 발생합니다. 스마트포인터는 이를 안전하게 처리해줍니다.



3D 그래픽스에서 HDR(High Dynamic Range) 렌더링이란 무엇이며, LDR(Low Dynamic Range) 렌더링과 비교했을 때 어떤 시각적 이점(예: 더 넓은 명암비 표현)을 제공하는지 설명하시오.
->
실제 세계의 빛의 범위(명암비)를 게임 엔진 내에서 더 넓게 표현하고 계산하는 렌더링 기술입니다. 픽셀당 더 많은 비트를 사용하여 밝기 정보를 저장합니다.
LDR 렌더링과 비교했을 때 넓은 명암비와 사실적인 조명을 표현할 수 있고 블룸, 라이트 샤프트 등 광원 효과를 더 자연스럽게 표현할 수 있습니다.

게임 네트워크 통신에서 신뢰성 있는(Reliable) UDP를 구현하기 위한 기본적인 메커니즘(예: ACK(확인 응답), 시퀀스 번호, 재전송)에 대해 설명하시오.
->
비연결형, 비신뢰성인 UDP 프로토콜 위에 데이터의 손실/순서바뀜/중복 없이 전송됨을 보장하는 계층을 구현하는 것입니다.
ACK(확인 응답): 수신 측에서 패킷을 성공적으로 받으면 송신 측으로 확인 응답 패킷을 보냅니다.
시퀀스 번호: 각 송신 패킷에 순서 번호를 부여하여 수신 측에서 패킷의 순서를 확인하고 중복 패킷을 감지하여 버릴 수 있도록 합니다.
재전송: 송신 측이 일정 시간 내에 ACK를 받지 못하면 해당 패킷이 손실된 것으로 간주하고 시퀀스 번호를 이용하여 다시 전송합니다.
타이머: 재전송 여부를 결정하기 위해 ACK를 기다리는 타임아웃 타이머를 사용합니다.

운영체제에서 페이지 폴트(Page Fault)가 발생하는 주된 원인과 이것이 시스템 성능에 미치는 영향에 대해 설명하시오.
->
운영체제의 가상 메모리 관리에서 프로세스가 현제 물리 메모리에 없는 페이지의 데이터나 코드에 접근하려고 시도할 때 발생합니다. 해당 페이지가 디스크에 저장되어 있기 때문에 발생합니다.
페이지 폴트가 발생하면 디스크에서 해당 페이지를 물리 메모리로 로드해야 하기 때문에 성능 저하가 발생하고 페이지 폴트가 너무 자주 발생하여 CPU가 대부분의 시간을 디스크에서 페이지를 로드하는데 사용하고 실제 의미있는 작업을 거의 하지 못하는 현상인 스래싱(Thrashing) 현상이 발생할 수 있습니다. 물리 메모리가 부족할수록 페이지 폴트 발생 빈도가 높아집니다.



언리얼 엔진 애니메이션 시스템에서 "동기화 그룹(Sync Group)"은 무엇이며, 여러 캐릭터나 애니메이션이 특정 기준(예: 동일한 애니메이션 시작점)에 맞춰 동기화되도록 하는 데 어떻게 사용되는지 설명하시오.
->
여러 애니메이션 클립 또는 캐릭터의 재생을 특정 기준으로 동기화하도록 묶는 기능입니다.
애니메이션 시퀀스에 동일한 Sync Group 이름을 할당하고 ABP의 스테이트 머신이나 블렌드 스페이스에서 동기화 그룹 옵션을 설정하여 사용합니다.
단체 군중 애니메이션이나 이동 애니메이션의 루프 동기화, 탈것/탑승 애니메이션에서 활용됩니다.

언리얼 엔진 네트워크 환경에서 IsNetRelevantFor() 함수는 어떤 역할을 하며, 액터의 네트워크 복제(Replication) 여부 및 효율성을 결정하는 데 어떻게 사용되는지 설명하시오.
->
액터가 특정 원격 클라이언트에게 네트워크상에서 복제될 필요가 있는지 여부를 결정하는 함수입니다. 서버에서 호출됩니다.
AActor의 가상함수로 필요에 따라 사용자 정의 액터에서 오버라이드하여 네트워크 복제 규칙을 커스터마이징합니다. 이 함수가 true를 반환하면 해당 액터는 클라이언트에게 복제될 가능성이 있지만 false인 경우 복제되지 않습니다. 액터와 클라이언트의 거리가 너무 멀거나 시야 범위 밖에 있는 경우, 플레이어에게 중요하지 않은 액터일 경우 false를 반환하도록 하여 불필요한 네트워크 트래픽을 줄이고 복제 효율성을 향상시킵니다.

언리얼 엔진에서 UObject의 메모리 관리 및 가비지 컬렉션(Garbage Collection)과 관련하여 MarkAsGarbage() 함수는 언제 사용되며 어떤 의미를 가지는지 설명하시오.
->
더이상 참조되지 않으며 삭제될 준비가 되었다고 명시적으로 표시하는 함수입니다.
참조 카운트나 루트셋으로부터 도달 가능성에 기반하지않고 강제로 GC 후보로 지정할 때 사용됩니다. 순환참조와 같이 정상적인 참조 제거로 GC가 객체 회수에 실패하는 경우 이 함수를 사용하여 객체를 명시적으로 가비지로 표시하고 회수되도록 합니다.

언리얼 엔진에서 특정 UProperty의 디테일 패널(Details Panel)을 커스터마이징(Customizing)하는 일반적인 방법(예: IPropertyTypeCustomization 사용)과 이것이 필요한 주된 이유를 설명하시오.
->
IPropertyTypeCustomization 인터페이스를 구현합니다. 이 인터페이스를 상속받는 C++ 클래스를 생성하고 CustomizeHeader()와 CustomizeChildren() 함수를 오버라이드하여 해당 속성의 표시방식과 자식 속성들의 표시방식을 직접 제어합니다. 이 클래스는 에디터 모듈에 등록해야 합니다.
직관적인 UI 제공, 데이터 유효성 검사/제한, 워크플로우 개선을 위해 디테일 패널 커스터마이징을 활용합니다.
