스마트 포인터(예: std::shared_ptr, std::unique_ptr, 언리얼의 TSharedPtr, TUniquePtr)를 사용하는 이유와 일반 포인터와 비교했을 때 장단점을 설명하시오.
->
스마트 포인터는 RAII 패턴이 적용된 대표적인 사례로 메모리의 관리를 도와줍니다. 생성된 블록 영역에서 벗어나거나 소멸될 때 자동으로 메모리를 해제하여 메모리 누수를 방지하고 더 안전한 코드를 작성합니다. C++에서 메모리의 할당과 해제는 new, delete 키워드를 사용하는데 스마트 포인터를 사용하는 경우 해제 시 메모리 호출이 자동화되어 프로그래머가 직접 delete를 호출할 필요가 없습니다. 이점을 이용하여 메모리의 누수를 방지하고 댕글링 포인터나 이중 해제 위험을 줄여주는 장점을 지닙니다. 단점으로는 일반 포인터보다는 메모리 공간을 더 차지하고 성능의 오버헤드가 발생할 수 있습니다. 순환 참조 문제가 발생할 수 있고 일반 포인터를 각각의 스마트 포인터에 담을 경우 2곳에서 사용중이지만 참조 카운트는 1인 경우 등의 문제가 발생할 수 있어 올바르게 사용하는 것이 중요합니다.

const 키워드의 다양한 사용법(변수, 포인터, 레퍼런스, 멤버 함수)을 설명하고 각각의 의미를 간략히 설명하시오.
->
const int a의 경우 변수의 값을 초기화한 뒤에 값을 변경할 수 없게 만듭니다.
const int* b의 경우 b가 가리키고 있는 주소의 값을 변경할 수 없게 만듭니다.
int* const c의 경우 c가 가리키고 있는 주소값을 초기화한 뒤에 더이상 다른 주소를 가리킬 수 없습니다.
const int& d의 경우 레퍼런스를 통해 원본 변수의 값을 변경할 수 없게 만듭니다.
void myclass::myfunc() const의 경우 해당 함수 내에서 함수가 속한 객체의 멤버변수를 변경할 수 없게 만듭니다.

이동 의미론(Move Semantics)의 개념과 std::move의 역할에 대해 설명하시오. 왜 이동 의미론이 필요한가요?
->
자원의 소유권을 복사하지않고 이동시키는 개념입니다. 복사를 위한 추가적인 메모리 할당을 피할 수 있습니다. std::move는 실제 이동을 위한 행동이 아니고 lhs가 rhs를 참조하는 것으로 캐스팅하는 역할을 합니다. 이를 통해 이동 생성자나 이동 대입 연산자를 호출할 수 있도록 합니다. 불필요한 자원 복사를 줄여 성능을 최적화할 수 있어 이동 의미론이 필요합니다.

가상 함수(Virtual Function)와 순수 가상 함수(Pure Virtual Function)의 차이점을 설명하고, 다형성(Polymorphism)과 어떤 관련이 있는지 설명하시오.
->
클래스에서 virtual 키워드가 붙은 함수를 가상함수라고 합니다. 파생 클래스에서 오버라이딩할 수 있고 원본 클래스에서도 구현부를 가질 수 있습니다. 클래스는 가상함수를 지니고 있더라도 객체로 생성이 가능합니다. 반면 순수 가상 함수는 원본 클래스가 객체로 생성될 수 없고 구현부를 가질 수 없습니다. 반드시 파생클래스에서 구현부를 구현해야 합니다. 가상함수의 선언 끝에 '= 0'이 붙으면 순수 가상함수입니다. 다형성은 하나의 인터페이스가 여러 형태의 객체를 다룰 수 있게 해주는 것인데 가상함수는 다형성을 구성하는 핵심 매커니즘이라고 할 수 있습니다. 가상함수는 원본 클래스가 실제로 가리키는 객체의 타입에 따라 실행할 함수를 런타임에 결정할 수 있고 파생 클래스만의 특정 동작을 수행할 수 있도록 합니다. 순수 가상함수는 파생 클래스가 반드시 구현하도록 강제하여 다형성을 구현합니다.

RAII(Resource Acquisition Is Initialization) 패턴이란 무엇이며, C++에서 이를 활용한 예시(예: 스마트 포인터, 파일 스트림)를 들어 설명하시오.
->
단어 뜻 그대로 '자원의 획득은 초기화'를 의미하며 자원의 획득은 생성자에서, 자원의 해제는 소멸자에서 수행하도록 하는 C++의 디자인 패턴입니다. 이를 통해 프로그래머가 자원의 해제를 놓치더라도 소멸자에서 자원의 해제를 자동화하여 자원이 해제되는 것을 보장합니다. C++에서 메모리의 할당 및 해제는 new와 delete 키워드를 이용하는데 스마트 포인터의 경우 별도의 delete를 선언하지 않더라도 자원이 생성된 영역이 소멸되는 경우에 소멸자를 호출하여 스스로를 자동으로 해제합니다.

스택(Stack) 메모리와 힙(Heap) 메모리의 차이점을 설명하고, 각각 어떤 경우에 주로 사용되는지 설명하시오.
->
스택은 함수의 지역 변수, 파라미터, 함수의 호출 정보 등이 저장되는 영역입니다. 컴파일 시점에 할당될 크기가 결정되는 고정 크기 데이터에 적합합니다. 할당 및 해제가 자동으로 빠르게 이루어집니다.
힙은 프로그래머가 런타임에 필요한 크기의 메모리를 동적으로 할당하고 해제하는 영역입니다. C++에서는 new와 delete 키워드를 이용하여 할당 및 해제를 진행하며 과정이 스택보다 느리고 명시적인 해제가 필요하거나 RAII 패턴이 적용된 데이터타입의 도움이 필요합니다. 객체의 수명이 스코프를 벗어나서도 유지되어야 하는 경우, 대규모 데이터 구조의 경우 힙에 할당되며 언리얼 엔진에서는 UObject 기반의 객체 대부분 힙에 할당됩니다.

nullptr와 NULL, 0의 차이점을 C++11 이후 기준으로 설명하시오.
->
0: 정수인 0 입니다. 암시적 변환이 허용되어 널포인터에 대한 상수로 활용되었으나 정수와 포인터 사이의 모호함을 유발할 수 있습니다.
NULL: 표준 키워드가 아니며 C 스타일에서 널포인터 상수를 나타내는 매크로입니다. 정수 0과 같이 값은 0이며 (void*)0으로 정의되기도 합니다. 0과 마찬가지로 타입 안정성이 부족하여 모호함을 유발할 수 있습니다.
nullptr: C++11에서 도입된 키워드로 널포인터를 나타내기 위한 전용 타입입니다. 포인터 타입과 bool 타입으로만 변환되며 타입이 명확한 널포인터를 표현하는 것에 사용이 권장됩니다.

포인터(Pointer)와 레퍼런스(Reference)의 차이점을 설명하시오.
->
포인터는 메모리 주소를 저장하는 변수입니다. nullptr값을 가질 수 있고 초기화 후 재할당이 가능합니다. 값을 얻기 위해 역참조(*) 연산자가 필요하며 포인터 연산이 가능합니다.
레퍼런스는 이미 존재하는 다른 변수에 대한 별칭입니다. nullptr값을 가질 수 없고 반드시 유효한 객체에 바인딩되어야 합니다. 한번 초기화되면 재할당이 불가합니다.

inline 함수의 사용 목적과 컴파일러가 inline을 처리하는 방식에 대해 설명하시오. 남용했을 때의 문제점은 무엇인가요?
->
짧고 자주 호출되는 함수는 함수로서 사용하기보다 호출 지점을 코드로 치환하는 것이 스택 프레임 생성/해제 등의 과정을 스킵할 수 있어 성능면에서 유리하기에 사용됩니다. inline 키워드를 이용해 inline 함수로 선언할 수 있지만 컴파일러의 판단(함수 길이, 복잡성, 최적화 등)에 의해 inlining을 수행할 지 결정합니다. 그래서 inline 키워드가 없더라도 inline 함수가 될 수 있고 inline 키워드가 있어도 inlining을 수행하지 않을 수 있습니다. 남용이 가능하다면 코드의 크기가 증가하여 CPU의 코드 캐시 효율성이 떨어져 성능 저하로 이어질 수 있고 컴파일 시간이 증가하며 콜스택 추적이 어려워져 디버깅이 복잡해질 수 있습니다.

C++에서 연산자 오버로딩(Operator Overloading)이란 무엇이며, 어떤 경우에 유용하게 사용될 수 있는지 간단한 예시를 들어 설명하시오.
->
C++에서 미리 정의된 연산자를 사용자가 클래스나 구조체에 대해 다시 정의하여 타입에 맞게 동작하도록 재설계하는 것을 말합니다. int x, y를 가지는 class Point2D에 대해 각각의 x와 y를 더하는 Point2D operator+(const Point2D& other)를 정의함으로서 두 Point2D 객체 A,B와 새로운 C를 만들 때 원래라면 C.x = A.x + B.x, C.y = A.y + B.y로 계산해주어야 하는 것을 Point2D C = A + B와 같이 사용할 수 있도록 만들어 줍니다.

(Optional) 템플릿(Template)의 기본 개념과 제네릭 프로그래밍(Generic Programming)과의 관계를 설명하시오.
->
템플릿은 타입이나 값을 파라미터로 받는 코드 구조입니다. 함수나 클래스를 특정 타입에 종속되지 않고 일반화하여 작성할 수 있게 해줍니다. 제네릭 프로그래밍은 데이터 타입에 구애받지 않고 재사용 가능한 코드를 작성하는 프로그래밍 패러다임입니다. 그래서 템플릿은 C++에서 제네릭 프로그래밍을 구현하는 핵심 도구입니다. Standard Template Library(STL)이 템플릿을 활용한 대표적인 제네릭 프로그래밍 라이브러리입니다.

(Optional) 멀티 스레딩 환경에서 발생할 수 있는 문제(예: Race Condition, Deadlock)와 이를 해결하기 위한 방법(예: Mutex, Lock)에 대해 간략히 설명하시오.
->
Race Condition은 여러 스레드가 공유 자원에 대해 동시에 접근하여 읽기/쓰기를 진행하여 스레드의 접근 순서에 따라 실행 결과가 달라지는 문제입니다. 예상치 못한 결과나 데이터 손상을 초래할 수 있습니다.
Deadlock은 모든 스레드가 멈추어 프로그램이 더이상 진행되지 못하는 상태입니다.
멀티 스레딩 문제는 스레드 간의 동기화를 통해 해결합니다. Mutex는 상호 배제를 위한 동기화의 기본 단위입니다. 뮤텍스가 만들어내는 크리티컬 섹션은 한번에 하나의 스레드만이 공유 자원에 접근할 수 있도록 보장합니다. 다른 스레드가 해당 자원에 접근하려면 뮤텍스가 해제될 때까지 기다려야 합니다. Lock은 뮤텍스를 사용하기 위한 RALL 스타일의 Wrapper입니다. std::lock_guard<mutex> guard1(mtx1) 와 같이 생성하며 생성될 때 뮤텍스를 획득하고 영역을 벗어나 소멸될때 뮤텍스를 해제하여 자원 누수를 방지합니다. Deadlock은 2개 이상의 뮤텍스를 사용해야 할 때 발생하기 쉬우며 이를 방지하기 위해 가장 좋은 방법은 뮤텍스를 하나만 사용하는 것이지만 그럴 수 없다면 모든 스레드에서 작업을 처리할 때 동일한 순서로 뮤텍스를 사용하거나 뮤텍스의 try_lock()을 이용해 스레드 간 우선 순위를 주는 방법이 있습니다.



자료구조 중 배열(Array)과 연결 리스트(Linked List)의 구조적 차이를 설명하고, 각각 데이터 접근 및 삽입/삭제 시의 시간 복잡도를 비교하시오.
->
배열은 메모리에 데이터가 연속적으로 할당됩니다. 각 요소는 인덱스를 통해 직접 접근할 수 있습니다,
연결 리스트는 각 데이터 요소가 데이터와 다음 노드를 가리키는 포인터로 구성되어 있습니다. 이중 연결 리스트의 경우 이전/다음 노드를 가리키는 포인터를 가지고 있기도 합니다. 메모리에 연속적으로 배치되지 않아도 됩니다.
배열의 데이터 접근은 O(1), 데이터 삽입/삭제는 O(N)입니다.
연결 리스트의 데이터 접근은 O(N), 데이터 삽입/삭제는 O(1)입니다.

해시 테이블(Hash Table)의 평균적인 데이터 삽입/검색 시간 복잡도는 얼마이며, 충돌(Collision) 발생 시 해결 방법에 대해 아는 대로 설명하시오.
->
해시 테이블의 평균적인 데이터 삽입/검색 시간 복잡도는 O(1)입니다. 해시 함수를 이용해 키를 즉시 인덱스로 변환하기 때문입니다.
서로 다른 키가 동일한 해시값으로 같은 버킷에 매핑될 때 충돌이 발생합니다. 이를 해결하기 위해서는 각 버킷을 다른 자료구조로 만들어 모든 요소를 버킷에 저장한 후 검색 시 버킷에 접근하여 해당 자료구조에서 검색하여 원하는 요소를 찾는 분리 연결법, 충돌이 발생하면 다른 빈 버킷을 찾아 데이터를 저장하는 개방 주소법이 있습니다. 개방 주소법은 선형 탐사, 제곱 탐사, 이중 해싱을 이용하여 빈 버킷을 탐사하는데 군집화 문제가 발생할 수 있습니다.

알고리즘의 시간 복잡도와 공간 복잡도를 나타내는 Big O 표기법에 대해 설명하고, O(N), O(N^2), O(log N), O(1)을 각각 어떤 경우에 볼 수 있는지 예시를 드시오.
->
빅오표기법은 입력 크기(N)이 커질 때 알고리즘의 실행 시간 또는 사용 메모리 공간이 N에 대해 얼마나 빠르게 증가하는지를 나타내는 점근적 상한 표기법입니다. 알고리즘의 효율을 비교하는데 사용되며 상수 계수나 낮은 차수의 항은 무시합니다.
O(1): 배열에서 인덱스 접근, 스택에 데이터 푸쉬/팝
O(logN): 정렬된 데이터에서 이진 검색
O(N): 배열, 리스트에서 모든 요소 순회, 정렬되지 않은 배열에서 특정 요소 찾기
O(N^2): 입력 크기의 제곱에 비례하여 실행 시간이 증가, 이중루프, 버블정렬, 선택정렬렬

프로세스(Process)와 스레드(Thread)의 차이점을 설명하시오.
->
프로세스는 실행중인 프로그램의 인스턴스입니다. 독립적인 메모리 공간과 자원을 가집니다. 프로세스간 자원공유는 IPC(Inter-Process Communication) 매커니즘을 통해 이루어지고 컨텍스트 스위칭 비용이 스레드보다 큽니다. 생성 및 전환 비용이 상대적으로 무겁습니다.
스레드는 프로세스 내에서 실행되는 실행 단위입니다. 동일한 프로세스에 속한 스레드들은 프로세스의 메모리 공간과 자원 대부분을 공유합니다. 각 스레드는 자신만의 스택, 레지스터 값, 프로그램 카운터 등을 가집니다. 스레드 간 자원 공유가 용이하며 컨텍스트 스위칭 비용이 프로세스보다 작습니다. 생성 및 전환 비용이 상대적으로 가볍습니다.
+
컨텍스트: 프로세스 또는 스레드가 작업을 실행하기 위한 모든 정보의 집합
cpu 레지스터 값, 프로그램 카운터, 스택, 메모리 관리 정보, 기타 os 자원 상태 등 보유

게임 클라이언트 개발에서 TCP와 UDP 중 어떤 프로토콜이 어떤 상황에 더 적합하며 그 이유는 무엇인지 설명하시오.
->
TCP는 연결지향, 신뢰성, 흐름제어, 혼잡제어 기능을 제공합니다. 패킷 전송에 대한 확인 응답(ACK) 과정이 있어 오버헤드가 큽니다. 게임에서 데이터가 정확하고 순서대로 도착해야 하는 경우에 적합합니다.
UDP는 비연결지향, 비신뢰성, 빠른 전송속도, 낮은 오버헤드를 가지지만 별도의 확인 응답 과정이 없습니다. 게임에서 실시간성과 속도가 중요하며 약간의 데이터 손실이나 순서 바뀜이 허용되는 경우에 사용됩니다.
+
언리얼 엔진은 UDP 프로토콜을 기반으로 통신을 합니다. 신뢰성이 필요한 경우 Reliable-UDP(RUDP)를 이용하여 통신을 하는데 이는 UDP 기반에 TCP가 제공하는 기능을 커스텀으로 추가한 방식이며 그 중에서도 신뢰성 기능을 필수로 추가한 커스텀 프로토콜입니다.

렌더링 파이프라인의 주요 단계(예: Vertex Processing, Rasterization, Fragment Processing)를 간략하게 설명하시오.
->
IA -> VS -> RS -> PS -> OM
IA: vram으로 전달된 정점 데이터를 읽어서 기본 도형(Primitives)을 조립합니다.
VS: 정점 연산을 수행합니다. 공간변환이 이루어지며 정점의 위치를 최종 2D 스크린 공간으로 변환합니다.
RS: 화면의 픽셀로 변환하는 단계로 선형 보간이 이루어지며 각 픽셀의 위치에서 보간된 속성 값을 생성합니다.
PS: 래스터라이저 단계를 거쳐 생성된 각 프래그먼트(픽셀의 정보 단위)에 대한 최종 색상 값을 결정하는 단계입니다. 텍스처 매핑, 광원 계산, 그림자, 투명도, 후처리 등이 적용됩니다.
OM: 모든 파이프라인 처리가 끝난 프래그먼트들을 최종 렌더 타겟에 그리는 단계입니다. 동일한 픽셀 위치에 여러 프래그먼트가 도착하면 깊이 테스트와 알파 블렌딩, 스텐실 테스트 등 후처리 작업을 수행하여 렌더 타겟 뷰(버퍼)에 기록합니다. 이 버퍼의 내용이 최종으로 화면에 표시됩니다.

더블 버퍼링(Double Buffering)이란 무엇이며, 왜 사용하는지 설명하시오.
->
화면에 이미 그려진 내용을 보여주는 전면 버퍼와 다음 화면에 보여줄 내용을 미리 그리는 후면 버퍼 두개의 버퍼를 사용하는 기법입니다. 후면 버퍼의 렌더링이 완료되면 전면 버퍼와 교체하여 후면 버퍼를 표시하고 전면 버퍼에 다음 내용을 렌더링합니다. 렌더링 과정이 사용자에게 노출될 때 발생하는 화면 찢어짐(=Tearing) 현상을 방지하기 위해 사용합니다.

VSync(Vertical Synchronization)란 무엇이며, 게임 그래픽에서 어떤 역할을 하는지 설명하시오.
->
모니터의 주사율과 그래픽카드의 프레임 생성 속도를 동기화 하는 기술입니다. VSync가 켜져있으면 그래픽카드는 후면 버퍼 렌더링을 완료하더라도 모니터가 다음 프레임을 그리기 시작하기까지 기다렸다가 버퍼 교체를 수행합니다. 더블 버퍼링과 함께 화면 찢어짐을 효과적으로 방지합니다.

(Optional) 캐시 메모리(Cache Memory)가 필요한 이유와 CPU와 메모리 사이에서 어떤 역할을 하는지 설명하시오.
->
캐시 메모리는 CPU와 메인 메모리 사이에 위치한 작고 빠른 임시 저장공간입니다. CPU가 자주 사용하거나 곧 사용할 것으로 예상되는 데이터와 명령어를 메인 메모리에서 가져와 캐시에 미리 저장해둡니다. CPU는 필요 시 캐시를 먼저 확인하고 데이터를 사용하며 데이터가 없다면 메인 메모리에서 가져오면서 캐시에 저장합니다. 일반적으로 L1, L2, L3 등 계층 구조를 가집니다.
CPU의 처리 속도는 메인 메모리의 데이터 접근 속도보다 훨씬 빠릅니다. CPU가 메인 메모리에서 데이터를 가져오는 데 걸리는 시간이 길기 때문에 데이터를 기다리는 동안 성능 저하가 발생합니다. 캐시 메모리는 이러한 속도 차이를 줄여 CPU 성능을 향상시키기 위해 필요합니다.

(Optional) 동기(Synchronous) 방식과 비동기(Asynchronous) 방식의 차이를 설명하고, 비동기 방식이 필요한 게임 개발 사례를 드시오.
->
동기 방식은 작업이 순차적으로 진행되며 작업이 완료되기 전까지 다른 작업을 수행할 수 없습니다.
비동기 방식은 작업을 진행하고 완료여부와 상관없이 다음 작업 역시 진행합니다. 완료된 작업의 결과는 나중에 콜백함수나 이벤트 등을 통해 전달받거나 확인합니다. 작업을 백그라운드에서 처리하여 메인 스레드가 다른 작업을 계속할 수 있도록 합니다.
언리얼 엔진의 메인 스레드 중 하나인 게임스레드는 게임 내 로직을 실시간으로 처리하므로 초당 수십번 이상의 처리속도를 요합니다. 그래서 잠깐의 스터터링도 유저에게 불쾌한 경험을 줄 수 있기 때문에 항상 높은 속도를 유지해야 합니다. 이 스레드가 끊김없이 실행되려면 코스트가 높은 작업이나 통신 작업과 같은 대기시간이 높은 작업들을 비동기로 처리해야 합니다. 대표적으로 에셋 로딩, 네트워크 통신 등이 있습니다.



언리얼 엔진에서 AActor와 UActorComponent의 차이점을 설명하고, 각각 어떤 역할을 하는지 설명하시오.
->
AActor: 레벨에 배치되거나 런타임에 스폰될 수 있는 모든 객체의 베이스 클래스입니다. Transform을 가지며 게임플레이 시뮬레이션에 참여하고 복제(Replication) 기능이 있어 네트워크 환경에서 클라이언트/서버 간 동기화의 기본 단위가 됩니다.
UActorComponent: 액터에 추가하여 특정 기능을 부여하는 모듈화된 부품입니다. has-a 관계를 지니며 레벨에 배치되지 않고 Transform이 없습니다. 액터에 부착되어 기능을 제공합니다.

언리얼 엔진의 UObject 상속 구조(UObject, AActor, UActorComponent 등)에 대해 간략히 설명하고, 이들이 언리얼 엔진 시스템과 어떻게 상호작용하는지 설명하시오.
->
UObject는 언리얼 엔진의 거의 모든 객체의 최상위 베이스 클래스입니다. 언리얼 엔진의 핵심 시스템과 연동하기 위한 기본적인 기능들을 얻을 수 있으며 AActor와 UActorComponent 모두 UObject를 상속받습니다.
UObject를 상속받는 객체들은 언리얼 헤더 툴(UHT)을 통해 리플렉션(Reflection) 정보가 생성됩니다. 이 정보를 통해 언리얼 엔진의 다양한 시스템이 해당 객체의 속성(UPROPERTY), 함수(UFUNCTION), 클래스 정보에 접근하고 관리할 수 있습니다.
에디터: UPROPERTY 매크로로 노출된 속성은 디테일 패널에서 편집 가능하고 UFUNCTION 매크로로 노출된 함수는 블루프린트에서 호출 가능
가비지 컬렉션: UObject 기반의 객체는 가비지 컬렉션 시스템의 관리 대상이 됩니다. UPROPERTY를 통해 다른 UObject를 참조하면 GC가 해당 참조를 추적합니다.
직렬화: UObject는 저장/로딩 시 바이너리나 텍스트 포맷으로 직렬화/역직렬화될 수 있습니다.
네트워킹: AActor와 UActorComponent의 하위 클래스들은 Replicated로 설정된 속성과 UFUNCTION RPC는 네트워크 환경에서 서버/클라이언트 간에 동기화가 가능합니다.

언리얼 엔진의 가비지 컬렉션(Garbage Collection) 시스템은 어떻게 작동하며, GC 대상이 되도록 하려면 C++ 코드에서 무엇을 해야 하는가? (UPROPERTY 등)
->
언리얼 엔진의 GC는 참조 추적(Reference Tracing) 방식을 사용합니다. 엔진이 실행된 후 주기적으로 GC가 실행되며 미리 정의된 루트 집합에서 시작하여 모든 UObject 참조를 따라가며 도달 가능한 객체들을 마킹합니다. 마킹되지 않은 객체들은 도달할 수 없다 판단하여 펜딩킬 상태가 되고 GC는 일정 주기마다 펜딩킬 상태인 사용되지 않는다고 판단된 메모리를 해제합니다.

언리얼 엔진의 리플렉션(Reflection) 시스템(UCLASS, UFUNCTION, UPROPERTY 등 매크로)이 필요한 이유와 어떤 기능들을 제공하는지 설명하시오.
->
C++ 컴파일러는 일반적으로 컴파일 시점에 타입 정보를 대부분 제거합니다. 하지만 게임 엔진은 런타임에 객체의 타입, 속성, 함수 정보를 알아야 하는 경우가 많습니다. 언리얼 엔진의 리플렉션 시스템은 컴파일 과정 중 언리얼 헤더 툴(UHT)을 통해 C++ 코드의 특정 매크로를 파싱하여 해당 타입의 메타데이터를 생성하고 이 메타데이터를 런타임에 엔진이 활용할 수 있도록 합니다. (generated.h 등)

C++ 코드를 블루프린트에서 사용하거나 블루프린트와 연동하기 위한 방법(UFUNCTION, BlueprintCallable, BlueprintImplementableEvent 등)에 대해 설명하시오.
->
변수를 블루프린트에서 사용하기 위해서는 UPROPERTY 매크로를 지정해야 합니다. 이후 BlueprintReadOnly, BlueprintReadWrite 등의 지정자를 이용해 블루프린트에서 사용할 수 있도록 지원합니다.
함수를 블루프린트에서 호출하기 위해서는 UFUNCTION 매크로를 지정해야 합니다. 이후 BlueprintCallable, BlueprintPure 등의 지정자를 이용해 블루프린트에서 호출할 수 있도록 지원하며 BlueprintImplementableEvent, BlueprintNativeEvent 지정자를 이용해 블루프린트에서 구현하거나 오버라이딩 할 수 있도록 지원합니다.
클래스를 블루프린트에서 지원하기 위해서는 UCLASS 매크로를 지정해야 합니다. 이후 Blueprintable 지정자를 이용해 블루프린트 클래스로 파생되거나 사용할 수 있게 지원합니다.

언리얼 엔진의 델리게이트(Delegate) 시스템의 목적과 사용법에 대해 설명하시오. (예: Single-cast, Multi-cast, Dynamic)
->
델리게이트 시스템은 객체 간의 루즈 커플링을 구현하기 위한 이벤트/콜백 시스템입니다. 특정 이벤트 발생 시 해당 이벤트의 처리를 위한 객체가 이벤트 발생 객체를 직접 참조하지 않고도 바인딩된 함수를 호출받을 수 있도록 지원합니다.
Single-cast: 하나의 델리게이트에 하나의 함수만 바인딩 가능
Multi-cast: 하나의 델리게이트에 여러개의 함수가 바인딩 가능
Dynamic: 해당 델리게이트가 블루프린트에서도 사용될 수 있도록 지원

언리얼 엔진에서 타이머(Timer)를 설정하고 관리하는 방법에 대해 설명하시오. (GetWorldTimerManager().SetTimer 등)
->
코드상에서 GetWorldTimerManager() 함수를 호출하여 FTimerManager 객체의 레퍼런스를 얻습니다. SetTimer() 함수를 사용해 타이머를 설정합니다. 타이머 설정 시 FTimerHandle이 주어지는 데 이를 이용하여 해당 타이머에 대한 식별 및 관리가 가능합니다.

언리얼 엔진의 입력 시스템(Input System)에서 액션 매핑(Action Mapping)과 축 매핑(Axis Mapping) (또는 Enhanced Input)의 개념을 설명하시오.
->
액션 매핑: 특정 키, 버튼, 이벤트를 액션 이름에 연결하는 방식입니다. 액션은 주로 on/off 상태나 점프와 같은 단발성 이벤트에 사용됩니다.
축 매핑: 특정 키, 버튼, 아날로그 입력을 축 이름에 연결하고 해당 입력에 스케일 값을 부여하는 방식입니다. 마우스나 조이패드와 같은 연속적인 입력에 사용되며 입력의 강도에 따라 값이 달라질 수 있습니다.
+
Enhanced Input System(향상된 입력 시스템): 언리얼 엔진 5부터 도입된 새로운 입력 시스템으로 Input Action과 Input Mapping Context를 사용하여 입력을 정의합니다.

네트워크 환경에서 클라이언트 프로그래머로서 프로퍼티 복제(Property Replication)와 RPC(Remote Procedure Call)의 개념 및 사용법(Server, Client, NetMulticast)에 대해 아는 대로 설명하시오.
->
네트워크 복제: 멀티플레이 게임에서 서버와 클라이언트 간에 게임 상태를 동기화하는 매커니즘입니다. 액터나 컴포넌트에서 특정 속성 값을 서버에서 클라이언트로 자동으로 동기화하거나 다른 머신에서 원격 함수 호출(RPC)을 지원합니다.
프로퍼티 복제: UPROPERTY 매크로에 Replicated나 ReplicatedUsing 지정자를 붙이면 해당 변수는 서버에서 값이 변경될 때 클라이언트에게 변경된 값이 전송되어 동기화됩니다. GetLifetimeReplicatedProps() 함수를 오버라이드하여 어떤 속성을 어떻게 복제할지 명시적으로 설정해야 합니다.
RPC: Remote Procedure Call의 준말로 하나의 머신에서 함수를 호출하면 네트워크를 통해 다른 머신에서 함수가 실행될 수 있도록 하는 원격 함수 호출입니다. UFUNCTION 매크로에 Server, Client, NetMulticast 지정자를 붙여 선언하고 구현부에 _Implementation 접미사를 붙여 작성합니다.
Server: 클라이언트가 이 지정자가 붙은 함수를 호출하면 서버에서 실행됩니다.
Client: 서버가 이 지정자가 붙은 함수를 호출하면 클라이언트에서 실행됩니다.
NetMulticast: 서버가 이 지정자가 붙은 함수를 호출하면 서버와 해당 액터를 복제받는 모든 클라이언트에 전파되어 실행됩니다. 클라이언트에서 실행할 경우 자기 자신만 실행되고 전파되지 않습니다.

언리얼 엔진의 주요 컨테이너 클래스(TArray, TMap, TSet)의 특징과 각각 어떤 상황에 사용하는 것이 적합한지 설명하시오.
->
TArray: (std::vector와 유사) 동적 크기 배열입니다. 인덱스를 통한 요소 접근이 O(1)로 빠르고 요소 추가나 마지막 요소 제거는 빠르지만 중간에 요소를 삽입/삭제하는 경우 느릴 수 있습니다. 요소의 순서가 중요한 경우 사용하는 것이 적합합니다.
TMap: (std::unordered_map과 유사) 키-값 쌍을 저장하는 해시 기반 컨테이너입니다. 키는 고유해야 하고 값은 중복될 수 있습니다. 검색/삽입/삭제는 일반적으로 O(1)이며 요소들의 순서는 보장되지 않습니다. 빠른 조회가 필요한 경우에 사용하는 것이 적합합니다.
TSet: (std::unordered_set과 유사) 고유한 요소들의 집합을 저장하는 해시 기반 컨테이너입니다. 순서는 보장되지 않고 각 요소는 컨테이너 내에서 고유해야 합니다. 검색/추가/삭제가 일반적으로 O(1)입니다. 요소의 중복이 허용되지 않는 경우 사용하는 것이 적합합니다.

액터(Actor)의 주요 생명주기(Life Cycle) 함수(예: BeginPlay, Tick, EndPlay)를 설명하고 호출 순서에 대해 간략히 설명하시오.
->
Constructor(=생성자): 액터 객체가 메모리에 생성 시 가장 먼저 호출
PostRegisterAllComponents: 모든 컴포넌트가 생성되고 등록된 후 호출
BeginPlay: 액터가 월드에 스폰되고 게임플레이가 시작되거나 레벨이 로드될 때 호출
Tick: 매프레임 호출
EndPlay: 액터가 월드에서 제거되거나 게임이 종료될 때 호출
Destructor(=소멸자): 액터 객체가 메모리에서 해제될 때 가장 마지막 호출

언리얼 엔진에서 성능 문제를 진단하고 해결하기 위해 사용할 수 있는 프로파일링 도구(예: Stat 명령, Session Frontend Profiler)를 아는 대로 설명하시오.
stat startfile: 프로파일링 데이터 추출 시작
stat stopfile: 프로파일링 데이터 추출 종료
stat fps: fps 확인
stat game: 게임 스레드 확인
stat unit: 주요 성능지표 확인

(Optional) 언리얼 엔진에서 FName, FString, FText의 차이점과 각각의 사용 목적을 설명하시오.
->
FName: 문자열을 고유한 ID로 관리합니다. 대소문자를 구분하지 않고 생성된 후 불변입니다. 스켈레탈 에디터에서 본, 소켓 이름이 FName을 사용합니다.
FString: (std::string과 유사) 가변 길이의 문자열을 저장하고 조작하는데 사용됩니다. 파일 경로, api 엔드포인트 등 일반적인 상황에서 가장 많이 사용됩니다.
FText: 로컬라이제이션을 지원하는 문자열 타입입니다. UI 텍스트와 같이 사용자에게 표시되는 문자열에 사용됩니다. 언어 설정에 따라 다른 문자열을 표시할 수 있도록 LOCTEXT 매크로를 사용하여 정의됩니다.

(Optional) 언리얼 엔진의 모듈(Module) 시스템이 필요한 이유와 Build.cs 파일의 역할에 대해 간략히 설명하시오.
->
언리얼 엔진은 코어 시스템에 많은 플러그인들이 연결된 형태로 구성되어 있습니다. 모듈은 플러그인을 구성하는 기본 단위이며 모듈 시스템은 엔진과 게임 코드를 기능별로 분리된 독립적인 단위로 구성하여 관리할 수 있게 해줍니다.
Build.cs는 C#으로 작성되며 언리얼 빌드 툴(UBT)이 특정 모듈을 컴파일하는데 필요한 설정 정보를 정의합니다. 각 모듈은 반드시 자신의 Build.cs를 가집니다.
