C++에서 람다 표현식(Lambda Expression) 사용 시 캡처(Capture) 방식([ ], [&], [=], [var])의 차이점을 설명하고, 각각 어떤 경우에 사용되는지 간단히 설명하시오.
->
[]: 외부 변수 참조 안함
[&]: 외부 변수들을 참조로 캡처, 람다 내에서 변경되면 외부 변수도 변경됨
[=]: 외부 변수들을 값으로 캡처, 람다 내에서 변경되더라도 외부 변수는 변경되지 않음
[var]: 특정 변수 var만 값으로 복사하여 캡처
[&var]: 특정 변수 var만 참조로 캡처
,를 이용하여 캡처를 조합할 수 있음
[=, &var]: 값으로 캡처하되 var는 참조로 캡처
[&, var]: 참조로 캡처하되 var는 값으로 캡처

다음 C++ 코드 스니펫에서 발생할 수 있는 잠재적인 문제점을 설명하고, 이를 해결하기 위한 방법을 제시하시오. (예: std::shared_ptr 간의 순환 참조를 유발하는 간단한 코드 구조 제시)
->
class A
{
public:
    std::shared_ptr<B> b_ptr;
}

class B
{
public:
    std::shared_ptr<A> a_ptr;
}

int main()
{
    auto a = std::make_shared<A>();
    auto b = std::make_shared<B>();

    a->b_ptr = b;
    b->a_ptr = a;

    return 0;
}

위 코드에서는 std::shared_ptr 간의 순환 참조가 발생합니다. A 인스턴스는 B 인스턴스를, B 인스턴스는 A 인스턴스를 각각 가리키며 main 함수의 스코프가 끝나더라도 각 인스턴스가 지닌 std::shared_ptr의 참조 카운트는 0이 되지 않아서 소멸자가 호출되지 않고 메모리 누수가 발생합니다.
두 객체 중 한쪽의 참조를 std::shared_ptr 대신 std_weak_ptr을 사용하여 참조 카운트의 증가 없이 참조하도록 변경하여 순환 참조를 끊을 수 있습니다.

C++에서 객체의 복사(Copy)와 이동(Move)이 성능에 어떤 영향을 미칠 수 있는지, 그리고 대용량 데이터를 다룰 때 이동 시맨틱(Move Semantics)이 왜 중요한지 간단한 예시를 들어 설명하시오.
->
복사: 객체를 복사할 때 해당 객체가 관리하는 모든 데이터의 복사본을 새로 생성합니다. 객체의 크기가 클수록 복사 작업에 더 많은 시간과 메모리가 소요되어 성능 저하의 원인이 됩니다.
이동: 객체를 이동할 때 데이터를 복사하는 대신 자원의 소유권만 원본 객체에서 새 객체로 이전합니다. 작업은 데이터 크기에 관계없이 매우 빠르게 진행되며 성능 저하에 영향을 주지 않습니다.
이동 의미론은 대용량 데이터를 저장하는 컨테이너를 다룰 때 필수적입니다. 데이터가 이동이 아닌 복사 작업이 진행된다면 매번 데이터 전체를 복사해야 하므로 성능이 저하되고 메모리 사용량도 늘어날 수 밖에 없습니다.

클라이언트-서버 환경의 실시간 게임에서 캐릭터의 위치나 상태를 네트워크로 동기화할 때 발생할 수 있는 주요 기술적 문제(예: 네트워크 지연으로 인한 불일치)와 이를 완화하기 위한 일반적인 클라이언트 측 접근 방식(예: 클라이언트 예측, 보간)에 대해 설명하시오.
->
네트워크 지연: 클라이언트의 입력이 서버에 도달하고 서버의 업데이트가 클라이언트에 반영되는 데 시간이 소요됩니다. 이로 인해 클라이언트가 보는 게임의 상태는 항상 서버의 현재 상태보다 약간 과거의 상태이며 플레이어 입력에 대한 반응도 지연됩니다. 이로 인해 클라이언트와 서버의 상태가 불일치하는 문제가 발생합니다.
지터: 패킷 도착 시간의 변동성으로 인해 업데이트 주기가 불규칙해져 객체의 움직임이 끊기거나 부자연스럽게 보일 수 있습니다.
패킷 손실: 네트워크 환경의 불안정성으로 인해 패킷이 유실될 수 있습니다. 패킷의 내용에 따라 게임 상태의 동기화가 깨질 수 있습니다.
이를 완화하기 위해 다음과 같은 방법들을 적용해볼 수 있습니다.
클라이언트 예측: 플레이어 자신의 조작에 대한 입력은 서버 응답을 기다리지 않고 클라이언트에서 즉시 시뮬레이션하여 위치나 상태를 업데이트합니다.
보간: 클라이언트는 서버로부터 받은 원격 객체의 과거 두개 이상의 위치/회전 정보를 저장하고 현재 프레임에서 그 중간 값을 보간하여 표시합니다. 이를 이용해 지터와 지연을 숨길 수 있습니다.

그래픽스 렌더링 성능 최적화에서 "드로우 콜(Draw Call)"이 왜 중요한 병목 지점이 될 수 있는지 설명하고, 드로우 콜 수를 줄이기 위한 기법(예: 메시 배칭, 아틀라스 텍스처 사용)에 대해 간략히 설명하시오.
->
드로우콜은 CPU가 GPU에게 특정 기하 정보를 특정 설정으로 화면에 그리도록 명령하는 API 호출입니다. 매 프레임 CPU는 화면에 보여질 모든 오브젝트에 대해 하나 이상의 드로우콜을 생성하여 GPU에게 보냅니다. 각 드로우콜을 처리할 때 CPU와 GPU 양쪽에서 오버헤드가 발생합니다. CPU는 드로우콜에 필요한 모든 상태를 설정하고 GPU로 명령을 보내야 하며 GPU는 명령을 받고 상태를 전환하는데 시간이 소요되기 때문입니다. 드로우콜을 줄이기 위해서는 여러 작은 텍스처를 하나의 텍스처로 합치는 텍스처 아틀라스, 동일한 지오메트리를 여러번 그릴 때 한번의 드로우콜로 여러 객체를 그리도록 하는 인스턴싱을 활용합니다.

넓은 게임 월드에서 특정 반경 내의 오브젝트를 효율적으로 검색하거나 관리하기 위해 사용될 수 있는 공간 분할(Spatial Partitioning) 자료구조(예: Quadtree, Octree 등)의 기본적인 개념과 장점을 설명하시오.
->
공간 분할은 한 공간을 여러개의 하위 영역으로 나누어 각 영역에 해당 영역 내 존재하는 요소들의 목록을 관리하는 기법으로 쿼드트리, 옥트리, k-d트리, bsp트리, 그리드 등이 대표적인 공간 분할 자료구조입니다. 이러한 자료구조들은 주로 트리 형태나 격자 형태를 가지며 재귀적으로 공간을 나누어 나갑니다.
쿼드트리: 2D공간을 4개의 사분면으로 재귀적으로 분할합니다. 각 노드는 4개의 자식을 가지거나 일정 레벨 이하로 분할되거나 노드 내 오브젝트 수가 적으면 리프 노드가 됩니다.
옥트리: 3D 공간을 8개의 팔분면으로 재귀적으로 분할합니다. 3D 게임 월드에 적합합니다.
공간 분할 자료구조를 사용함으로서 얻을 수 있는 장점은 다음과 같습니다.
효율적인 공간 쿼리: 특정 영역 내 오브젝트 검색 등 공간 기반 쿼리를 수행할 때 전체 월드의 모든 오브젝트를 확인하는 대신 공간 분할 구조를 따라가면서 관련있는 하위 영역에 있는 오브젝트들만 검사하면 됩니다. 이에따라 검색 성능이 O(N)에서 O(logN)이상으로 개선됩니다.
컬링: 카메라 시야 범위 밖 오브젝트나 특정 광원의 영향 범위 밖의 오브젝트를 렌더링/계산 대상에서 제외하여 성능을 최적화할 수 있습니다.
충돌 감지 최적화: 잠재적인 충돌 쌍을 찾고자 할 때 관련있는 영역 내 오브젝트만 검사하여 충돌 검사량을 줄입니다.
메모리 관리: 넓은 월드의 데이터를 스트리밍 로딩하거나 언로딩할 때 공간 분할 영역 단위로 관리하기 용이합니다.

언리얼 엔진 네트워크 프로그래밍에서 RPC(Remote Procedure Call) 사용 시 Server, Client, NetMulticast 지정자의 역할과 각각 어떤 상황에 호출되어야 하는지 실무적인 예시를 들어 설명하시오.
->
Server RPC: 클라이언트에서 호출하면 서버에서 실행됩니다. 캐릭터 선택 후 준비가 완료되었음을 서버에 전송할 때 사용합니다.
Client RPC: 서버에서 호출하면 클라이언트에서 실행됩니다. 서버가 특정 클라이언트의 상태를 강제로 변경할 필요가 있을 때(주로 UI) 사용합니다.
NetMulticast RPC: 서버에서 호출하면 서버 자신과 소유하거나 복제받는 모든 클라이언트에서 실행됩니다. 주로 시각 또는 청각적인 효과를 나타내야 하는 경우 피격 효과나 사운드 재생등에 사용합니다.

언리얼 엔진에서 서로 다른 액터(Actor)나 컴포넌트(Component) 간에 상호작용하거나 데이터를 주고받는 다양한 방법(예: Direct Function Call, Interface, Delegate, Event Dispatcher, Get/Find 함수)들을 나열하고 각 방법의 특징과 적절한 사용 시점을 설명하시오.
->
직접 객체를 참조하여 상호작용하거나 데이터를 주고받을 수 있지만 객체를 특정할 수 있는 경우에 사용하고 범용적으로 권장되지 않습니다.
서로 관련없는 클래스에서 동일한 기능을 수행하고자 하는 경우에 Interface를 구성하여 사용하면 편리합니다.
가장 권장되는 방식으로 이벤트 기반 통신인 Delegate/Event Dispatcher를 사용합니다. 다대일, 다대다 통신에 유용하며 이벤트 발생 객체는 어떤 객체가 자신에게 바인딩을 하는지 확인할 필요가 없습니다.
관계가 고정적이거나 이미 정해진 단일 객체 등 특정 조건을 만족하는 객체의 경우 제공되는 Get 함수나 검색을 통해 사용하기도 합니다.

언리얼 엔진에서 클라이언트 측 성능을 최적화하기 위해 고려해야 할 주요 영역(예: Tick 함수의 부하, 렌더링 관련 비용, 메모리 사용량)들을 제시하고, 각 영역에서 적용할 수 있는 구체적인 최적화 기법을 2가지 이상 설명하시오.
->
대부분 Tick에서의 성능 문제를 해결하면 성능이 향상됩니다. 반드시 필요한 로직만 Tick에서 실행하도록 하고 그렇지 않은 로직들은 다르게 구현하여 Tick의 부하를 줄여줍니다. 꼭 필요한 경우에만 다이나믹 라이트를 사용하고 그렇지 않은 경우 스태틱 라이트를 활용하는 것이 좋습니다. 라이팅의 수를 적게 사용하고 중복되는 영역을 비추지 않도록 하는 것도 최적화에 도움이 됩니다.

언리얼 엔진으로 개발된 게임 클라이언트에서 특정 논리적 버그(예: 아이템 사용 시 효과가 비정상적으로 적용됨)를 디버깅하기 위해 사용할 수 있는 언리얼 엔진 자체 제공 디버깅 도구 또는 C++ 디버깅 기법(예: UE_LOG 사용, 비주얼 스튜디오 디버거 연동, Stat 명령 활용)들을 설명하시오.
->
논리적 버그를 해결하기 위해서는 많은 로그를 심어 과정을 추적하는 것이 중요합니다. UE_LOG 매크로를 사용하여 코드의 어느 부분에서 논리적 버그가 발생하는지 영역을 빠르게 찾아낼 수 있습니다. 이후 IDE에서 중단점을 걸어 해당 영역에서의 로직과 메모리 상태를 점검하여 논리적 버그를 해결합니다.