C++11에 도입된 람다(Lambda) 함수는 무엇이며, 캡처(Capture) 방식(값 캡처 [=], 참조 캡처 [&], 특정 변수 캡처 [var], [&var])에 따른 차이점과 각각의 사용 시 주의사항을 설명하시오.

C++에서 std::function과 std::bind는 각각 어떤 용도로 사용되며, 런타임에 다양한 형태의 콜백(Callback)이나 함수 객체를 저장하고 호출하는 데 어떻게 활용되는지 설명하시오.

C++의 네 가지 명시적 타입 캐스트 연산자(const_cast, static_cast, dynamic_cast, reinterpret_cast)의 주된 용도를 각각 설명하고, 이들의 안전성 측면에서의 차이점 및 사용 시 주의사항을 논하시오.



**전략 패턴(Strategy Pattern)**은 무엇이며, 게임 개발에서 캐릭터의 행동(예: 다양한 공격 방식, 이동 로직)을 유연하게 변경하고 확장하는 데 어떻게 적용될 수 있는지 구체적인 예시와 함께 설명하시오.

**옵저버 패턴(Observer Pattern)**은 무엇이며, 게임 내 이벤트 시스템(예: UI 업데이트, 게임 상태 변경 알림, 플레이어 스탯 변화 감지)을 구현하는 데 어떻게 활용될 수 있는지 설명하시오.

대규모 게임 프로젝트에서 **버전 관리 시스템(Source Control System)**으로 Git 또는 Perforce를 사용할 때의 일반적인 워크플로우(WorkFlow)와 바이너리 에셋(Binary Assets)에서 발생하는 충돌(Conflict)을 해결하기 위한 전략에 대해 아는 대로 설명하시오.



언리얼 엔진의 **애니메이션 몽타주(Animation Montage)**는 무엇이며, 캐릭터의 특정 동작(예: 공격, 스킬 사용, 피격)을 애니메이션 블루프린트와 분리하여 재생, 제어, 블렌딩하는 데 어떻게 사용되는지 설명하시오.

언리얼 엔진에서 게임을 패키징(Packaging)하기 전에 수행되는 "쿠킹(Cooking)" 과정은 무엇이며, 이 과정이 원본 에셋을 어떤 방식으로 최종 게임 빌드에 최적화하고 통합하는 데 기여하는지 설명하시오.

언리얼 엔진의 TInlineAllocator는 무엇이며, TArray와 같은 컨테이너에서 작은 크기의 배열 데이터에 대해 힙 할당을 피하고 스택에 직접 메모리를 할당하여 성능을 최적화하는 데 어떻게 사용되는지 설명하시오.

언리얼 엔진의 Behavior Tree에서 **커스텀 태스크(Custom Task), 서비스(Service), 데코레이터(Decorator)**는 각각 어떤 역할을 하며, AI 행동 로직을 C++로 확장하고 재사용하는 데 어떻게 활용되는지 설명하시오.