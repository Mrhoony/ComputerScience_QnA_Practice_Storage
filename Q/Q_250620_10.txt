스택(Stack)과 힙(Heap)의 기본 개념: 프로그램 실행 시 스택 메모리 영역과 힙 메모리 영역이 각각 어떤 용도로 사용되며, 어떤 종류의 데이터가 저장되는지 설명하시오.

메모리 할당 방식 및 해제: 스택과 힙에서 메모리가 할당되고 해제되는 방식(예: 자동 vs 수동, LIFO vs 임의 접근)의 차이점을 설명하시오.

성능 및 효율성 비교: 스택 할당과 힙 할당의 성능(속도)을 비교하고, 각각의 할당 방식이 캐시(Cache) 효율성 및 CPU 오버헤드에 어떤 영향을 미치는지 설명하시오.

스택 오버플로우(Stack Overflow): 스택 오버플로우가 발생하는 주된 원인은 무엇이며, 게임 개발에서 이러한 문제가 발생할 수 있는 시나리오(예: 깊은 재귀 호출, 너무 큰 지역 변수)를 제시하시오.

힙 단편화(Heap Fragmentation): 힙 단편화가 발생하는 원인과 이것이 프로그램의 메모리 사용 효율성 및 성능에 미치는 부정적인 영향을 설명하시오. 단편화를 완화하기 위한 일반적인 방법에는 어떤 것들이 있나요?

메모리 누수(Memory Leak): 힙 메모리에서 메모리 누수가 발생하는 원인과 이것이 장시간 실행되는 게임에 미치는 치명적인 영향(예: 성능 저하, 크래시)을 설명하시오. C++에서 메모리 누수를 방지하기 위한 방법을 제시하시오.

스마트 포인터와 힙: C++ 스마트 포인터(예: std::unique_ptr, std::shared_ptr)가 힙 메모리 관리에 어떻게 기여하며, 원시 포인터(raw pointer) 사용 시 발생할 수 있는 메모리 관련 문제를 어떻게 해결하는지 설명하시오.

지역 변수와 동적 할당: 함수 내에서 작은 크기의 객체나 배열을 선언할 때 스택에 할당하는 것이 유리한 이유와, 동적으로 크기가 변하거나 함수 호출 후에도 유지되어야 하는 데이터를 힙에 할당하는 이유를 설명하시오.

언리얼 엔진의 메모리 관리: 언리얼 엔진에서 UObject 기반 객체들이 주로 어떤 메모리 영역에 할당되며, 언리얼 엔진의 가비지 컬렉션(Garbage Collection) 시스템이 힙 메모리 관리에 어떤 역할을 하는지 설명하시오.

메모리 정렬(Memory Alignment): 메모리 정렬이 필요한 주된 이유(예: CPU 성능 최적화, 특정 데이터 타입의 요구사항)와 스택 및 힙 할당 시 메모리 정렬이 어떻게 처리될 수 있는지 설명하시오.