언리얼 엔진 리플렉션 시스템의 목적과 필요성: 언리얼 엔진에서 리플렉션(Reflection) 시스템이 필요한 주된 이유는 무엇이며, 이 시스템이 없었다면 구현하기 어려웠을 언리얼 엔진의 핵심 기능들(예: 블루프린트, 가비지 컬렉션, 에디터의 세부 정보 패널, 직렬화)을 설명하시오.

리플렉션 시스템의 작동 방식 (UHT의 역할): 언리얼 엔진에서 UCLASS(), UPROPERTY(), UFUNCTION()와 같은 특수 매크로들이 어떻게 C++ 코드를 리플렉션 시스템에 노출시키는지 설명하시오. 특히 **UHT(Unreal Header Tool)**가 이 과정에서 어떤 핵심적인 역할을 수행하는지 설명하시오.

런타임 리플렉션 객체 활용: 런타임에 클래스, 프로퍼티, 함수에 대한 메타데이터를 제공하는 UClass, FProperty (또는 파생 클래스인 FIntProperty, FStrProperty 등), UFunction과 같은 리플렉션 객체들의 역할은 무엇이며, 이들을 통해 어떤 정보를 얻고 동적으로 제어할 수 있는지 설명하시오.

리플렉션 시스템의 실제 활용 사례: 리플렉션 시스템이 게임의 로딩 및 저장(Serialization), 네트워크 복제(Replication), 에디터의 세부 정보 패널(Details Panel) 자동 생성 및 커스터마이징, 블루프린트 노출 등 다양한 언리얼 엔진의 핵심 기능에서 어떻게 구체적으로 활용되는지 주요 사례를 들어 설명하시오.

리플렉션 시스템의 오버헤드와 설계 고려 사항: 언리얼 엔진의 리플렉션 시스템이 제공하는 강력한 기능에도 불구하고 발생할 수 있는 잠재적인 런타임 오버헤드(예: 초기화 시간, 메모리 사용량)는 무엇이며, 따라서 모든 C++ 클래스를 UObject로 만들지 않고 일반 C++ 클래스를 사용하는 상황과 이유에 대해 설명하시오.