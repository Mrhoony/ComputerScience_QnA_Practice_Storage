C++17에 도입된 std::optional과 std::variant는 무엇이며, 각각 Nullable 타입이나 이종(heterogeneous) 타입 집합을 안전하게 다루는 데 어떻게 활용될 수 있는지 설명하시오.

C++에서 **사용자 정의 리터럴(User-defined Literals)**은 무엇이며, 어떤 상황에서 코드의 가독성과 타입 안전성을 높이는 데 사용될 수 있는지 간단한 예시와 함께 설명하시오.

C++의 SFINAE (Substitution Failure Is Not An Error) 원칙은 무엇이며, 템플릿 메타 프로그래밍에서 특정 타입에 대한 오버로드(Overload)를 선택적으로 활성화하거나 비활성화하는 데 어떻게 사용되는지 설명하시오.



3D 그래픽스에서 **노멀 맵(Normal Map)**은 무엇이며, 실제 지오메트리 변경 없이 오브젝트의 디테일을 향상시키는 데 어떻게 사용되는지, 그리고 탄젠트 공간(Tangent Space)의 중요성에 대해 설명하시오.

네트워크 게임에서 **랙 보상(Lag Compensation)**은 무엇이며, 클라이언트의 입력 지연으로 인한 불공정한 상황을 완화하기 위해 서버 측에서 어떤 방식으로 구현되는지 설명하시오.

운영체제에서 **가상 메모리(Virtual Memory)**의 페이징(Paging) 메커니즘은 무엇이며, TLB(Translation Lookaside Buffer)의 역할과 TLB 미스(Miss)가 시스템 성능에 미치는 영향에 대해 설명하시오.



언리얼 엔진에서 **콘트롤 릭(Control Rig)**은 무엇이며, 기존 애니메이션 방식과 비교하여 절차적 애니메이션(Procedural Animation)이나 복잡한 IK(Inverse Kinematics) 셋업을 구현하는 데 어떤 이점을 제공하는지 설명하시오.

언리얼 엔진에서 **애셋 레지스트리(Asset Registry)**는 무엇이며, 엔진이 에셋을 탐색하고 관리하며, 특히 에디터에서 에셋을 빠르게 검색하고 참조를 추적하는 데 어떻게 활용되는지 설명하시오.

언리얼 엔진에서 FMemory 유틸리티 함수들(예: FMemory::Malloc, FMemory::Free, FMemory::Memcpy)을 직접 사용하는 경우가 왜 드물며, 주로 어떤 상황(예: 낮은 수준의 메모리 최적화, 커스텀 할당자 구현)에서 사용될 수 있는지 설명하시오.

언리얼 엔진의 **언리얼 인사이트(Unreal Insights)**는 무엇이며, CPU 및 GPU 프로파일링, 메모리 트래킹, 로깅 등 다양한 성능 데이터를 수집하고 시각화하여 게임 성능 병목 현상을 진단하는 데 어떻게 활용되는지 설명하시오.