C++에서 람다 표현식(Lambda Expression) 사용 시 캡처(Capture) 방식([ ], [&], [=], [var])의 차이점을 설명하고, 각각 어떤 경우에 사용되는지 간단히 설명하시오.

다음 C++ 코드 스니펫에서 발생할 수 있는 잠재적인 문제점을 설명하고, 이를 해결하기 위한 방법을 제시하시오. (예: std::shared_ptr 간의 순환 참조를 유발하는 간단한 코드 구조 제시)

C++에서 객체의 복사(Copy)와 이동(Move)이 성능에 어떤 영향을 미칠 수 있는지, 그리고 대용량 데이터를 다룰 때 이동 시맨틱(Move Semantics)이 왜 중요한지 간단한 예시를 들어 설명하시오.

클라이언트-서버 환경의 실시간 게임에서 캐릭터의 위치나 상태를 네트워크로 동기화할 때 발생할 수 있는 주요 기술적 문제(예: 네트워크 지연으로 인한 불일치)와 이를 완화하기 위한 일반적인 클라이언트 측 접근 방식(예: 클라이언트 예측, 보간)에 대해 설명하시오.

그래픽스 렌더링 성능 최적화에서 "드로우 콜(Draw Call)"이 왜 중요한 병목 지점이 될 수 있는지 설명하고, 드로우 콜 수를 줄이기 위한 기법(예: 메시 배칭, 아틀라스 텍스처 사용)에 대해 간략히 설명하시오.

넓은 게임 월드에서 특정 반경 내의 오브젝트를 효율적으로 검색하거나 관리하기 위해 사용될 수 있는 공간 분할(Spatial Partitioning) 자료구조(예: Quadtree, Octree 등)의 기본적인 개념과 장점을 설명하시오.

언리얼 엔진 네트워크 프로그래밍에서 RPC(Remote Procedure Call) 사용 시 Server, Client, NetMulticast 지정자의 역할과 각각 어떤 상황에 호출되어야 하는지 실무적인 예시를 들어 설명하시오.

언리얼 엔진에서 서로 다른 액터(Actor)나 컴포넌트(Component) 간에 상호작용하거나 데이터를 주고받는 다양한 방법(예: Direct Function Call, Interface, Delegate, Event Dispatcher, Get/Find 함수)들을 나열하고 각 방법의 특징과 적절한 사용 시점을 설명하시오.

언리얼 엔진에서 클라이언트 측 성능을 최적화하기 위해 고려해야 할 주요 영역(예: Tick 함수의 부하, 렌더링 관련 비용, 메모리 사용량)들을 제시하고, 각 영역에서 적용할 수 있는 구체적인 최적화 기법을 2가지 이상 설명하시오.

언리얼 엔진으로 개발된 게임 클라이언트에서 특정 논리적 버그(예: 아이템 사용 시 효과가 비정상적으로 적용됨)를 디버깅하기 위해 사용할 수 있는 언리얼 엔진 자체 제공 디버깅 도구 또는 C++ 디버깅 기법(예: UE_LOG 사용, 비주얼 스튜디오 디버거 연동, Stat 명령 활용)들을 설명하시오.