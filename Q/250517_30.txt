스마트 포인터(예: std::shared_ptr, std::unique_ptr, 언리얼의 TSharedPtr, TUniquePtr)를 사용하는 이유와 일반 포인터와 비교했을 때 장단점을 설명하시오.

const 키워드의 다양한 사용법(변수, 포인터, 레퍼런스, 멤버 함수)을 설명하고 각각의 의미를 간략히 설명하시오.

이동 의미론(Move Semantics)의 개념과 std::move의 역할에 대해 설명하시오. 왜 이동 의미론이 필요한가요?

가상 함수(Virtual Function)와 순수 가상 함수(Pure Virtual Function)의 차이점을 설명하고, 다형성(Polymorphism)과 어떤 관련이 있는지 설명하시오.

RAII(Resource Acquisition Is Initialization) 패턴이란 무엇이며, C++에서 이를 활용한 예시(예: 스마트 포인터, 파일 스트림)를 들어 설명하시오.

스택(Stack) 메모리와 힙(Heap) 메모리의 차이점을 설명하고, 각각 어떤 경우에 주로 사용되는지 설명하시오.

nullptr와 NULL, 0의 차이점을 C++11 이후 기준으로 설명하시오.

포인터(Pointer)와 레퍼런스(Reference)의 차이점을 설명하시오.

inline 함수의 사용 목적과 컴파일러가 inline을 처리하는 방식에 대해 설명하시오. 남용했을 때의 문제점은 무엇인가요?

C++에서 연산자 오버로딩(Operator Overloading)이란 무엇이며, 어떤 경우에 유용하게 사용될 수 있는지 간단한 예시를 들어 설명하시오.

(Optional) 템플릿(Template)의 기본 개념과 제네릭 프로그래밍(Generic Programming)과의 관계를 설명하시오.

(Optional) 멀티 스레딩 환경에서 발생할 수 있는 문제(예: Race Condition, Deadlock)와 이를 해결하기 위한 방법(예: Mutex, Lock)에 대해 간략히 설명하시오.



자료구조 중 배열(Array)과 연결 리스트(Linked List)의 구조적 차이를 설명하고, 각각 데이터 접근 및 삽입/삭제 시의 시간 복잡도를 비교하시오.

해시 테이블(Hash Table)의 평균적인 데이터 삽입/검색 시간 복잡도는 얼마이며, 충돌(Collision) 발생 시 해결 방법에 대해 아는 대로 설명하시오.

알고리즘의 시간 복잡도와 공간 복잡도를 나타내는 Big O 표기법에 대해 설명하고, O(N), O(N^2), O(log N), O(1)을 각각 어떤 경우에 볼 수 있는지 예시를 드시오.

프로세스(Process)와 스레드(Thread)의 차이점을 설명하시오.

게임 클라이언트 개발에서 TCP와 UDP 중 어떤 프로토콜이 어떤 상황에 더 적합하며 그 이유는 무엇인지 설명하시오.

렌더링 파이프라인의 주요 단계(예: Vertex Processing, Rasterization, Fragment Processing)를 간략하게 설명하시오.

더블 버퍼링(Double Buffering)이란 무엇이며, 왜 사용하는지 설명하시오.

VSync(Vertical Synchronization)란 무엇이며, 게임 그래픽에서 어떤 역할을 하는지 설명하시오.

(Optional) 캐시 메모리(Cache Memory)가 필요한 이유와 CPU와 메모리 사이에서 어떤 역할을 하는지 설명하시오.

(Optional) 동기(Synchronous) 방식과 비동기(Asynchronous) 방식의 차이를 설명하고, 비동기 방식이 필요한 게임 개발 사례를 드시오.



언리얼 엔진에서 AActor와 UActorComponent의 차이점을 설명하고, 각각 어떤 역할을 하는지 설명하시오.

언리얼 엔진의 UObject 상속 구조(UObject, AActor, UActorComponent 등)에 대해 간략히 설명하고, 이들이 언리얼 엔진 시스템과 어떻게 상호작용하는지 설명하시오.

언리얼 엔진의 가비지 컬렉션(Garbage Collection) 시스템은 어떻게 작동하며, GC 대상이 되도록 하려면 C++ 코드에서 무엇을 해야 하는가? (UPROPERTY 등)

언리얼 엔진의 리플렉션(Reflection) 시스템(UCLASS, UFUNCTION, UPROPERTY 등 매크로)이 필요한 이유와 어떤 기능들을 제공하는지 설명하시오.

C++ 코드를 블루프린트에서 사용하거나 블루프린트와 연동하기 위한 방법(UFUNCTION, BlueprintCallable, BlueprintImplementableEvent 등)에 대해 설명하시오.

언리얼 엔진의 델리게이트(Delegate) 시스템의 목적과 사용법에 대해 설명하시오. (예: Single-cast, Multi-cast, Dynamic)

언리얼 엔진에서 타이머(Timer)를 설정하고 관리하는 방법에 대해 설명하시오. (GetWorldTimerManager().SetTimer 등)

언리얼 엔진의 입력 시스템(Input System)에서 액션 매핑(Action Mapping)과 축 매핑(Axis Mapping) (또는 Enhanced Input)의 개념을 설명하시오.

네트워크 환경에서 클라이언트 프로그래머로서 프로퍼티 복제(Property Replication)와 RPC(Remote Procedure Call)의 개념 및 사용법(Server, Client, NetMulticast)에 대해 아는 대로 설명하시오.

언리얼 엔진의 주요 컨테이너 클래스(TArray, TMap, TSet)의 특징과 각각 어떤 상황에 사용하는 것이 적합한지 설명하시오.

액터(Actor)의 주요 생명주기(Life Cycle) 함수(예: BeginPlay, Tick, EndPlay)를 설명하고 호출 순서에 대해 간략히 설명하시오.

언리얼 엔진에서 성능 문제를 진단하고 해결하기 위해 사용할 수 있는 프로파일링 도구(예: Stat 명령, Session Frontend Profiler)를 아는 대로 설명하시오.

(Optional) 언리얼 엔진에서 FName, FString, FText의 차이점과 각각의 사용 목적을 설명하시오.

(Optional) 언리얼 엔진의 모듈(Module) 시스템이 필요한 이유와 Build.cs 파일의 역할에 대해 간략히 설명하시오.
